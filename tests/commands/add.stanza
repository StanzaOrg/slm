#use-added-syntax(tests)
defpackage slm/tests/commands/add:
  import core
  import collections

  import semver

  import slm/commands/add
  import slm/toml
  import slm/dependency

  import slm/tests/test-tools

deftest(add-cmd) test-add-git-basic:

  val input = SlmToml("my-pkg", "0.1.2", [])

  val uut = add-git-dependency(input, "StanzaOrg/stanza-toml", One $ SemanticVersion(0,3,2))

  #EXPECT( name(uut) == "my-pkg" )
  #EXPECT( version(uut) == "0.1.2" )
  #EXPECT( compiler?(uut) == None() )

  val deps = dependencies(uut)
  val names = to-tuple $ keys(deps)
  #EXPECT( length(names) == 1 )
  #EXPECT( names[0] == "stanza-toml" )

  val dep = deps["stanza-toml"] as GitDependency
  #EXPECT(name(dep) == "stanza-toml")
  #EXPECT(locator(dep) == "StanzaOrg/stanza-toml")
  #EXPECT(version(dep) == SemanticVersion(0,3,2))


deftest(add-cmd) test-add-git-existing:

  val input = SlmToml(
    "my-pkg", "0.1.2", [
      "stanza-toml" => GitDependency("stanza-toml", "StanzaOrg/stanza-toml", SemanticVersion(0,3,1), "")
    ])

  defn attempt-add () :
    ; Without Force - this should fail.
    add-git-dependency(input, "StanzaOrg/stanza-toml", One $ SemanticVersion(0,3,2))

  val msg = expect-throw(attempt-add)

  #EXPECT(prefix?(value!(msg), "Attempting add dependency 'stanza-toml' but a pre-existing dependency"))

deftest(add-cmd) test-add-git-existing-force:

  val input = SlmToml(
    "my-pkg", "0.1.2", [
      "stanza-toml" => GitDependency("stanza-toml", "StanzaOrg/stanza-toml", SemanticVersion(0,3,1), "")
    ])

    ; Force should cause this to complete successfully
  val uut = add-git-dependency(input, "StanzaOrg/stanza-toml", One $ SemanticVersion(0,3,2), force = true)

  #EXPECT( name(uut) == "my-pkg" )
  #EXPECT( version(uut) == "0.1.2" )
  #EXPECT( compiler?(uut) == None() )

  val deps = dependencies(uut)
  val names = to-tuple $ keys(deps)
  #EXPECT( length(names) == 1 )
  #EXPECT( names[0] == "stanza-toml" )

  val dep = deps["stanza-toml"] as GitDependency
  #EXPECT(name(dep) == "stanza-toml")
  #EXPECT(locator(dep) == "StanzaOrg/stanza-toml")
  #EXPECT(version(dep) == SemanticVersion(0,3,2))


deftest(add-cmd) test-add-git-name-override:

  val input = SlmToml(
    "my-pkg", "0.1.2", []
  )

  val uut = add-git-dependency(input, "StanzaOrg/stanza-toml", One $ SemanticVersion(0,3,2), name-override = One("toml2"))


  #EXPECT( name(uut) == "my-pkg" )
  #EXPECT( version(uut) == "0.1.2" )
  #EXPECT( compiler?(uut) == None() )

  val deps = dependencies(uut)
  val names = to-tuple $ keys(deps)
  #EXPECT( length(names) == 1 )
  #EXPECT( names[0] == "toml2" )

  val dep = deps["toml2"] as GitDependency
  #EXPECT(name(dep) == "toml2")
  #EXPECT(locator(dep) == "StanzaOrg/stanza-toml")
  #EXPECT(version(dep) == SemanticVersion(0,3,2))

deftest(add-cmd) test-add-path-basic:

  val input = SlmToml(
    "my-pkg", "0.1.2", []
  )

  val uut = add-path-dependency(input, "/Users/ted/src/stanza-toml", None())

  #EXPECT( name(uut) == "my-pkg" )
  #EXPECT( version(uut) == "0.1.2" )
  #EXPECT( compiler?(uut) == None() )

  val deps = dependencies(uut)
  val names = to-tuple $ keys(deps)
  #EXPECT( length(names) == 1 )
  #EXPECT( names[0] == "stanza-toml" )

  val dep = deps["stanza-toml"] as PathDependency
  #EXPECT(name(dep) == "stanza-toml")
  #EXPECT(path(dep) == "/Users/ted/src/stanza-toml")
  #EXPECT(version?(dep) == None())

deftest(add-cmd) test-add-path-name-override:

  val input = SlmToml(
    "my-pkg", "0.1.2", [
      "maybe-utils" => GitDependency("maybe-utils", "StanzaOrg/maybe-utils", SemanticVersion(0,1,4), "")
      "semver" => GitDependency("semver", "StanzaOrg/semver", SemanticVersion(0,1,2), "")
    ])

  val uut = add-path-dependency(input, "/Users/ted/src/stanza-toml", None(), name-override = One("toml-extreme"))

  #EXPECT( name(uut) == "my-pkg" )
  #EXPECT( version(uut) == "0.1.2" )
  #EXPECT( compiler?(uut) == None() )

  val deps = dependencies(uut)
  val names = to-tuple $ keys(deps)
  #EXPECT( length(names) == 3 )

  val dep = deps["toml-extreme"] as PathDependency
  #EXPECT(name(dep) == "toml-extreme")
  #EXPECT(path(dep) == "/Users/ted/src/stanza-toml")
  #EXPECT(version?(dep) == None())

  var gdep = deps["maybe-utils"] as GitDependency
  #EXPECT(name(gdep) == "maybe-utils")
  #EXPECT(locator(gdep) == "StanzaOrg/maybe-utils")
  #EXPECT(version(gdep) == SemanticVersion(0,1,4))

  gdep = deps["semver"] as GitDependency
  #EXPECT(name(gdep) == "semver")
  #EXPECT(locator(gdep) == "StanzaOrg/semver")
  #EXPECT(version(gdep) == SemanticVersion(0,1,2))


deftest(add-cmd) test-add-path-with-version:

  val input = SlmToml(
    "my-pkg",
    "0.1.2", [
      "maybe-utils" => GitDependency("maybe-utils", "StanzaOrg/maybe-utils", SemanticVersion(0,1,4), "")
      "semver" => GitDependency("semver", "StanzaOrg/semver", SemanticVersion(0,1,2), "")
    ])

  val uut = add-path-dependency(input, "/Users/ted/src/stanza-toml", One $ SemanticVersion(1, 0, 3))

  #EXPECT( name(uut) == "my-pkg" )
  #EXPECT( version(uut) == "0.1.2" )
  #EXPECT( compiler?(uut) == None() )

  val deps = dependencies(uut)
  val names = to-tuple $ keys(deps)
  #EXPECT( length(names) == 3 )

  val dep = deps["stanza-toml"] as PathDependency
  #EXPECT(name(dep) == "stanza-toml")
  #EXPECT(path(dep) == "/Users/ted/src/stanza-toml")
  #EXPECT(version?(dep) == One $ SemanticVersion(1, 0, 3))

  var gdep = deps["maybe-utils"] as GitDependency
  #EXPECT(name(gdep) == "maybe-utils")
  #EXPECT(locator(gdep) == "StanzaOrg/maybe-utils")
  #EXPECT(version(gdep) == SemanticVersion(0,1,4))

  gdep = deps["semver"] as GitDependency
  #EXPECT(name(gdep) == "semver")
  #EXPECT(locator(gdep) == "StanzaOrg/semver")
  #EXPECT(version(gdep) == SemanticVersion(0,1,2))
