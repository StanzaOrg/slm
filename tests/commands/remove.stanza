#use-added-syntax(tests)
defpackage slm/tests/commands/remove:
  import core
  import collections

  import semver

  import slm/commands/remove
  import slm/toml
  import slm/dependency

  import slm/tests/test-tools

deftest(rm-cmd) test-remove-basic:

  val input = SlmToml(
    "my-pkg",
    "0.1.3",
    [
      "stanza-toml" => GitDependency("stanza-toml", "StanzaOrg/stanza-toml", SemanticVersion(0,3,1), "")
    ]
    compiler? = "jstanza"
  )

  val uut = remove-dependency(input, ["stanza-toml"])

  #EXPECT( name(uut) == "my-pkg" )
  #EXPECT( version(uut) == "0.1.3" )
  #EXPECT( compiler?(uut) == One("jstanza"))

  val deps = dependencies(uut)
  val names = to-tuple $ keys(deps)
  #EXPECT( length(names) == 0 )


deftest(rm-cmd) test-remove-not-found:

  val input = SlmToml(
    "my-pkg", "0.1.3", []
  )

  defn attempt-remove () :
    remove-dependency(input, ["stanza-toml"])

  val msg = expect-throw(attempt-remove)
  #EXPECT(prefix?(value!(msg), "The following dependencies were not found"))


deftest(rm-cmd) test-remove-with-others:

  val input = SlmToml(
    "my-pkg", "0.1.3",
    [
      "stanza-toml" => GitDependency("stanza-toml", "StanzaOrg/stanza-toml", SemanticVersion(0,3,1), "")
      "semver" => GitDependency("semver", "StanzaOrg/semver", SemanticVersion(0,1,4), "")
      "maybe-utils" => GitDependency("maybe-utils", "StanzaOrg/maybe-utils", SemanticVersion(0,1,5), "")
      "scooby-doo" => PathDependency("scooby-doo", "/where/are/you")
    ],
    compiler? = "jstanza"
  )

  val uut = remove-dependency(input, ["semver"])

  #EXPECT( name(uut) == "my-pkg" )
  #EXPECT( version(uut) == "0.1.3" )
  #EXPECT( compiler?(uut) == One("jstanza"))

  val deps = dependencies(uut)
  val names = to-tuple $ keys(deps)
  val expNames = ["stanza-toml", "maybe-utils", "scooby-doo"]
  #EXPECT( length(names) == length(expNames) )

  for name in names do:
    #EXPECT(contains?(expNames, name))

deftest(rm-cmd) test-remove-multiple:

  val input = SlmToml(
    "my-pkg", "0.1.3",
    [
      "stanza-toml" => GitDependency("stanza-toml", "StanzaOrg/stanza-toml", SemanticVersion(0,3,1), "")
      "semver" => GitDependency("semver", "StanzaOrg/semver", SemanticVersion(0,1,4), "")
      "maybe-utils" => GitDependency("maybe-utils", "StanzaOrg/maybe-utils", SemanticVersion(0,1,5), "")
      "scooby-doo" => PathDependency("scooby-doo", "/where/are/you")
    ],
    compiler? = "jstanza"
  )

  val uut = remove-dependency(input, ["semver", "scooby-doo"])

  #EXPECT( name(uut) == "my-pkg" )
  #EXPECT( version(uut) == "0.1.3" )
  #EXPECT( compiler?(uut) == One("jstanza"))

  val deps = dependencies(uut)
  val names = to-tuple $ keys(deps)
  val expNames = ["stanza-toml", "maybe-utils"]
  #EXPECT( length(names) == length(expNames) )

  for name in names do:
    #EXPECT(contains?(expNames, name))


deftest(rm-cmd) test-remove-multiple-with-fail:

  val input = SlmToml(
    "my-pkg", "0.1.3",
    [
      "stanza-toml" => GitDependency("stanza-toml", "StanzaOrg/stanza-toml", SemanticVersion(0,3,1), "")
      "semver" => GitDependency("semver", "StanzaOrg/semver", SemanticVersion(0,1,4), "")
      "maybe-utils" => GitDependency("maybe-utils", "StanzaOrg/maybe-utils", SemanticVersion(0,1,5), "")
      "scooby-doo" => PathDependency("scooby-doo", "/where/are/you")
    ]
    compiler? = "jstanza"
  )

  defn attempt-remove ():
    remove-dependency(input, ["semver", "scooby-doo", "not-existing"])

  val msg = expect-throw(attempt-remove)

  #EXPECT(prefix?(value!(msg), "The following dependencies were not found"))

