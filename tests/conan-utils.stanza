#use-added-syntax(tests)
defpackage slm/tests/conan-utils:
  import core
  import slm/conan-utils

deftest(conan) test-conan-version:
  val v_name = "foo"
  val v_ver = "1.2.3"
  val v_recipe_rev = "d41d8cd98f00b204e9800998ecf8427e"
  val v_pkg_id = "da39a3ee5e6b4b0d3255bfef95601890afd80709"
  val v_pkg_rev = "2401fa1d188d289bb25c37cfa3317e13e377a351"
  val v_expected_static = "foo/1.2.3#d41d8cd98f00b204e9800998ecf8427e:da39a3ee5e6b4b0d3255bfef95601890afd80709#2401fa1d188d289bb25c37cfa3317e13e377a351"
  val v_expected = "%_/%_#%_:%_#%_" % [v_name, v_ver, v_recipe_rev, v_pkg_id, v_pkg_rev]
  #EXPECT(to-string(v_expected) == v_expected_static)

  val cv = ConanVersion(v_expected_static)
  #EXPECT(v_expected_static == to-string(cv))
  #EXPECT(v_name == name(cv))
  #EXPECT(v_ver == version(cv))
  #EXPECT(v_recipe_rev == recipe_revision(cv))
  #EXPECT(v_pkg_id == package_id(cv))
  #EXPECT(v_pkg_rev == package_revision(cv))

  ; just name and version
  val v1 = "foo/1.2.3"
  val cv1 = ConanVersion(v1)
  #EXPECT(v1 == to-string(cv1))
  #EXPECT(v_name == name(cv1))
  #EXPECT(v_ver == version(cv1))
  #EXPECT(false == recipe_revision(cv1))
  #EXPECT(false == package_id(cv1))
  #EXPECT(false == package_revision(cv1))

  ; name, version, and recipe revision
  val v2 = "foo/1.2.3#d41d8cd98f00b204e9800998ecf8427e"
  val cv2 = ConanVersion(v2)
  #EXPECT(v2 == to-string(cv2))
  #EXPECT(v_name == name(cv2))
  #EXPECT(v_ver == version(cv2))
  #EXPECT(v_recipe_rev == recipe_revision(cv2))
  #EXPECT(false == package_id(cv2))
  #EXPECT(false == package_revision(cv2))

  ; name, version, and package_id
  val v3 = "foo/1.2.3:da39a3ee5e6b4b0d3255bfef95601890afd80709"
  val cv3 = ConanVersion(v3)
  #EXPECT(v3 == to-string(cv3))
  #EXPECT(v_name == name(cv3))
  #EXPECT(v_ver == version(cv3))
  #EXPECT(false == recipe_revision(cv3))
  #EXPECT(v_pkg_id == package_id(cv3))
  #EXPECT(false == package_revision(cv3))

  ; name, version, recipe revision, and package_id
  val v4 = "foo/1.2.3#d41d8cd98f00b204e9800998ecf8427e:da39a3ee5e6b4b0d3255bfef95601890afd80709"
  val cv4 = ConanVersion(v4)
  #EXPECT(v4 == to-string(cv4))
  #EXPECT(v_name == name(cv4))
  #EXPECT(v_ver == version(cv4))
  #EXPECT(v_recipe_rev == recipe_revision(cv4))
  #EXPECT(v_pkg_id == package_id(cv4))
  #EXPECT(false == package_revision(cv4))

  ; note: package_revision without package_id is invalid

  ; negative tests
  val v5 = "invalid%1.2.3!d41d8cd98f00b204e9800998ecf8427e:da39a3ee5e6b4b0d3255bfef95601890afd80709"
  try:
    val cv5 = ConanVersion(v5)
    ; the invalid version should have caused an exception
    #EXPECT(false)
  catch (e:Exception):
    ; successfully caused exception
    false
  
