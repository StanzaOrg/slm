defpackage slm/git-utils:
  import core
  import collections

  import maybe-utils
  import semver

  import slm/utils
  import slm/logging
  import slm/file-utils
  import slm/process-utils
  import slm/libgit-utils

doc: \<DOC>
Parser the version string returned by git

The git version is typically in the form:

'git version 2.38.0'

But may also be in the form:

'git version 2.38.0.window.1'

This attempts to parse both to determine the version
<DOC>
defn parse-git-version (msg:String) -> Maybe<SemanticVersion> :
  val comps = split(msg, " ")
  for comp in comps first:
    val version-elements = to-tuple $ split(comp, ".", 4)
    if length(version-elements) < 3:
      None()
    else:
      val version-str = string-join(version-elements[0 through 2], ".")
      parse-semver(version-str)

defn run-git-version () -> Maybe<SemanticVersion> :
  if get-env("SLM_DISABLE_GIT") is-not False :
    None()
  else :
    try:
      val p = ProcessBuilder(["git", "version"])
        $> with-output
        $> build

      ; Evidently - you have to call `get-output` before `run` here
      ;   Otherwise, it will throw an "Bad file descriptor" error.
      val msg = get-output(p) $> trim
      val code = run-and-get-exit-code(p)
      if code == 0:
        debug("Parsing git version: %_" % [msg])
        parse-git-version(msg)
      else if code == 127:
        ; This indicates that there is no `git` on the path:
        debug("git version returns code=%_ - Not on Path" % [code])
        None()
      else:
        debug("Error checking 'git version': code = %_ \n %_" % [code, msg])
        None()
    catch (e:ProcessLaunchError):
      ; Launch failure is synonymous with executable not found.
      debug("Failed to Launch 'git version': %_" % [e])
      None()

var git-vers:Maybe<SemanticVersion> = run-git-version()

public defn git-version? () -> Maybe<SemanticVersion> :
  git-vers

public defn has-git? () -> True|False :
  match(git-version?()):
    (x:One<SemanticVersion>): true
    (_:None): false

public defn check-git-version (required:SemanticVersion) -> True|False :
  match(git-version?()):
    (_:None): false
    (curr:One<SemanticVersion>): value(curr) >= required

public defn git-rev-parse (work-tree: String, rev: String) -> String:
  command-output-in-dir(work-tree, ["git", "rev-parse", "--verify", "--quiet", rev])

public defn git-rev-parse! (work-tree: String, rev: String) -> String:
  val ret = git-rev-parse(work-tree, rev)
  if empty?(ret):
    throw(Exception("git rev-parse failed!"))
  ret

public defn git-or-libgit-rev-parse! (work-tree: String, rev: String) -> String :
  if has-git?() :
    git-rev-parse!(work-tree, rev)
    val ret = git-rev-parse(work-tree, rev)
    if empty?(ret):
      throw(Exception("git rev-parse failed!"))
    ret
  else :
    debug("falling back to libgit for rev-parse")
    libgit-rev-parse(work-tree, rev)

public defn git-remote-tag-refs (remote: String) -> HashTable<String, String>:
  val can-use-git? =
    if has-git?() :
      ; We need at least this version to use `ls-remote`.
      val exp-git = SemanticVersion(2, 28, 0)
      if check-git-version(exp-git) :
        true
      else :
        debug("falling back to libgit2 for ls-remote")
        false
    else :
      debug("falling back to libgit2 for ls-remote")
      false

  if can-use-git? :
    val p = ProcessBuilder(["git", "ls-remote", "-q", "--tags", remote])
      $> with-output
      $> build

    val output = get-output(p) $> trim
    val code = run-and-get-exit-code(p)
    if code != 0:
      throw $ Exception("Failed to list tags from remote")

    val pairs = to-tuple $ split(output, "\n")
    to-hashtable<String, String> $ seq?{_, pairs} $ fn (line):
      val elements = to-tuple $ split(line, "\t")
      if length(elements) == 2:
        One(elements[1] => elements[0])
      else:
        None()
  else :
    libgit-lsremote-tags(remote)

defn is-prefix? (a:String, prefix:String) -> True|False :
  (length(a) >= length(prefix)) and (a[0 to length(prefix)] == prefix)

public defn parse-full-git-tag (tag:String) -> Maybe<SemanticVersion> :
  if is-prefix?(tag, "refs/tags/") :
    var tag*:String = tag[10 to false]
    tag* = split-any(tag*, "^~:")[0]
    if length(tag) > 0 and tag*[0] == "v" :
      tag* = tag*[1 to false]
    parse-semver(tag*)
  else :
    None()

doc: \<DOC>
Convert the `Tag` => Git Hash table to a SemVer => Hash table.

This takes the output of `git-remote-tag-refs` and converts it into
a more useable format for querying the versions.
<DOC>
public defn to-version-table (tag-hash:HashTable<String,String>) -> HashTable<SemanticVersion, String> :
  to-hashtable<SemanticVersion, String> $ for kvp in tag-hash seq? :
    val [tag, hash-str] = [key(kvp), value(kvp)]
    match(parse-full-git-tag(tag)):
      (x:None): x
      (x:One<SemanticVersion>):
        One(value(x) => hash-str)

public defn run-git-command-in-dir (args0: Tuple<String>
                                    --
                                    work-tree?:Maybe<String> = None(),
                                    quiet:True|False = false,
                                    throw-on-error:True|False = true) -> Int:
  val args = to-tuple $ cat(["git"], args0)
  val work-tree = work-tree? $> value-or{_, get-cwd()}
  var b = ProcessBuilder(args)
    $> in-dir{_, work-tree}
  if quiet:
    b = with-output(b) $> with-error-stream{_}
  val process = build(b)
  val failure-msg = "'%_' failed!" % [string-join(args, " ")]
  if throw-on-error :
    wait-process-throw-on-nonzero(process, failure-msg)
  else :
    match(wait(process)) :
      (code:ProcessDone): value(code)
      (_): throw(Exception(failure-msg))

public defn run-git-command-in-dir (work-tree: String,
                                    args0: Tuple<String>
                                    --
                                    quiet:True|False = false
                                    throw-on-error:True|False = true) -> Int:
  run-git-command-in-dir(args0, work-tree? = One(work-tree),
    quiet = quiet, throw-on-error = throw-on-error)

public defn run-git-command (args0: Tuple<String>) -> Int:
  run-git-command-in-dir(args0)

public defn shallow-clone-git-repo (
  url: String,
  directory: String
) -> Int:
  run-command-throw-on-error(["git", "clone", url, "--quiet", "--depth", "1", directory],
                             "'git clone %_' failed!" % [url])

public defn git-init (path: String) -> Int:
  run-command-throw-on-error(["git", "init", "--quiet", path],
                             "'git init %_' failed!" % [path])

public defn git-status (work-tree:String = ?) -> True|False :
  try:
    run-git-command-in-dir(["status"], work-tree? = work-tree, quiet = true)
    true
  catch (e:Exception):
    false
