defpackage slm/git-utils:
  import core
  import collections

  import maybe-utils
  import semver

  import slm/utils
  import slm/logging
  import slm/file-utils
  import slm/process-utils

doc: \<DOC>
Parser the version string returned by git

The git version is typically in the form:

'git version 2.38.0'

But may also be in the form:

'git version 2.38.0.window.1'

This attempts to parse both to determine the version
<DOC>
defn parse-git-version (msg:String) -> Maybe<SemanticVersion> :
  val comps = split(msg, " ")
  for comp in comps first:
    val version-elements = to-tuple $ split(comp, ".", 4)
    if length(version-elements) < 3:
      None()
    else:
      val version-str = string-join(version-elements[0 through 2], ".")
      parse-semver(version-str)

defn run-git-version () -> Maybe<SemanticVersion> :
  try:
    val p = ProcessBuilder(["git", "version"])
      $> with-output
      $> build

    ; Evidently - you have to call `get-output` before `run` here
    ;   Otherwise, it will throw an "Bad file descriptor" error.
    val msg = get-output(p) $> trim
    val code = run-and-get-exit-code(p)
    if code == 0:
      debug("Parsing git version: %_" % [msg])
      parse-git-version(msg)
    else if code == 127:
      ; This indicates that there is no `git` on the path:
      debug("git version returns code=%_ - Not on Path" % [code])
      None()
    else:
      debug("Error checking 'git version': code = %_ \n %_" % [code, msg])
      None()
  catch (e:ProcessLaunchError):
    ; Launch failure is synonymous with executable not found.
    debug("Failed to Launch 'git version': %_" % [e])
    None()

var git-vers:Maybe<SemanticVersion> = run-git-version()

public defn git-version? () -> Maybe<SemanticVersion> :
  git-vers

public defn has-git? () -> True|False :
  match(git-version?()):
    (x:One<SemanticVersion>): true
    (_:None): false

public defn check-git-version (required:SemanticVersion) -> True|False :
  match(git-version?()):
    (_:None): false
    (curr:One<SemanticVersion>): value(curr) >= required

public defn git-rev-parse (work-tree: String, rev: String) -> String:
  command-output-in-dir(work-tree, ["git", "rev-parse", "--verify", "--quiet", rev])

public defn git-rev-parse! (work-tree: String, rev: String) -> String:
  val ret = git-rev-parse(work-tree, rev)
  if empty?(ret):
    throw(Exception("git rev-parse failed!"))
  ret

public defn git-remote-tag-refs (remote: String) -> HashTable<String, String>:
  val p = ProcessBuilder(["git", "ls-remote", "-q", "--tags", remote])
    $> with-output
    $> build

  val output = get-output(p) $> trim
  val code = run-and-get-exit-code(p)
  if code != 0:
    throw $ Exception("Failed to list tags from remote")

  val pairs = to-tuple $ split(output, "\n")
  to-hashtable<String, String> $ seq?{_, pairs} $ fn (line):
    val elements = to-tuple $ split(line, "\t")
    if length(elements) == 2:
      One(elements[1] => elements[0])
    else:
      None()

doc: \<DOC>
Convert the `Tag` => Git Hash table to a SemVer => Hash table.

This takes the output of `git-remote-tag-refs` and converts it into
a more useable format for querying the versions.
<DOC>
public defn to-version-table (tag-hash:HashTable<String,String>) -> HashTable<SemanticVersion, String> :
  to-hashtable<SemanticVersion, String> $ for kvp in tag-hash seq? :
    val [tag, hash-str] = [key(kvp), value(kvp)]
    val comps = split-any(tag, "^~:")
    val tagPath = comps[0]
    val [root, tagName] = split-filepath(tagPath)
    ; We expect tagName to be in the form `v0.3.2` or something similar.
    val tagName* = tagName[1 to false]
    val version? = parse-semver(tagName*)
    match(version?):
      (x:None): x
      (x:One<SemanticVersion>):
        One(value(x) => hash-str)

public defn run-git-command-in-dir (work-tree?: Maybe<String>, args0: Tuple<String>) -> Int:
  val args = to-tuple $ cat(["git"], args0)
  val work-tree = work-tree? $> value-or{_, get-cwd()}
  val process = ProcessBuilder(args)
    $> in-dir{_, work-tree}
    $> build
  wait-process-throw-on-nonzero(process, "'%_' failed!" % [string-join(args, " ")])

public defn run-git-command-in-dir (work-tree: String, args0: Tuple<String>) -> Int:
  run-git-command-in-dir(One(work-tree), args0)

public defn run-git-command (args0: Tuple<String>) -> Int:
  run-git-command-in-dir(None(), args0)

public defn shallow-clone-git-repo (
  url: String,
  directory: String
) -> Int:
  run-command-throw-on-error(["git", "clone", url, "--quiet", "--depth", "1", directory],
                             "'git clone %_' failed!" % [url])

public defn git-init (path: String) -> Int:
  run-command-throw-on-error(["git", "init", "--quiet", path],
                             "'git init %_' failed!" % [path])

