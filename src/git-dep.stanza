defpackage slm/git-dep:
  import core

  import libgit2
  import semver
  import maybe-utils
  import term-colors

  import slm/dependency
  import slm/flags
  import slm/utils
  import slm/logging
  import slm/git-utils
  import slm/libgit-utils

; Dependencies specified by Git locator/version (e.g. `foo = "myorg/myuser|1.0.0"`)
public defstruct GitDependency <: Dependency:
  name: String with: (as-method => true)
  locator: String
  version: SemanticVersion
  hash: String with: (updater => sub-hash)

defmethod path (d: GitDependency):
  path-join(SLM_DEPS_DIR, name(d))

defmethod version-string? (d: GitDependency) -> One<String>:
  One(version-string(d))

defmethod print (o:OutputStream, d:GitDependency) :
  print(o, "%_ = { git = \"%_\", version = \"%_\" }" % [name(d), locator(d), version-string(d)])

public defn version-string (d: GitDependency) -> String:
  to-string(version(d))

public defn colored-version? (d: GitDependency) -> ColoredString:
  ColoredString(version-string(d))
    $> bold $> foreground{_, TerminalBrightGreen}
    $> clear-color?

public defn colored-name? (d: Dependency) -> ColoredString:
  ColoredString(name(d))
    $> bold $> foreground{_, TerminalBrightWhite}
    $> clear-color?

doc: \<DOC>
Legacy Version of the Git Dependency Parser

The legacy version uses a string in the form `name|0.1.2`
where `0.1.2` is the version for the dependency.
<DOC>
public defn parse-git-dependency (name: String, specifier: String):
  info("Extracting Legacy Github Dependency Specifier for '%_'. Consider Upgrading to Toml Table Variable" % [name])
  GitDependency(name, locator, requested-version, hash)
where:
  val [locator, requested-version] = parse-specifier(specifier)
  val hash = ""

defn parse-specifier (specifier: String) -> [String, SemanticVersion]:
  val elements = to-tuple $ split(specifier, "|")
  switch(length(elements)):
    2:
      val url = elements[0]
      val version = elements[1]
        $> parse-semver
        $> expect{_, "couldn't parse '%_'" % [specifier]}
      [url, version]
    else:
      error("malformed specifier '%_'" % [specifier])

public defn parse-git-dependency (name:String, locator:String, version?:Maybe<String>) -> GitDependency :
  val version = match(version?):
    (x:None):
      throw $ Exception("Invalid Git Dependency[%_]: No Version Attribute found"% [name])
    (x:One<String>):
      parse-semver(value(x)) $>
        expect{_, "Git Dep[%_]: Failed to Parse Version: '%_'" % [name, x]}

  val hash = "" ; This gets resolved during the fetch/sync
  GitDependency(name, locator, version, hash)

public defn fetch-dependency-at-version (dep:GitDependency) -> False:
  info("cloning %_ at %~" % [colored-name?(dep), colored-version?(dep)])
  ; Use git if available
  if has-git?() :
    ; Clone
    val url = full-url-from-locator(locator(dep))
    val path = /path(dep)
    shallow-clone-git-repo(url, path)

    ; Check for "v*.*.*" or "*.*.*" tag
    val vers = /version(dep)
    val tag-candidates = [to-string("v%~" % [vers]), to-string(vers)]
    val tag? = for tag in tag-candidates find :
      run-git-command-in-dir(path, ["ls-remote", "-q", "-t", "--exit-code",
        "origin", tag], quiet = true, throw-on-error = false) == 0
    val tag = match(tag?) :
      (tag:String) :
        debug("using tag %_ for dependency %_" % [tag, name(dep)])
        tag
      (_) :
        throw(Exception("Could not checkout version %_ for dependency %_" %
          [vers, name(dep)]))

    ; Fetch and checkout
    val refspec = to-string("+refs/tags/%_:refs/tags/%_" % [tag, tag])
    run-git-command-in-dir(path, ["fetch", "--quiet", "origin", refspec])
    run-git-command-in-dir(path, ["checkout", "--quiet", "--force", tag])
  else :
    ; Fallback to libgit2
    debug("falling back to libgit for fetch dependency")
    libgit-fetch-dependency(dep)
  false

public defn sync-dependency-to-version (dep:GitDependency) -> False:
  debug("checking if we need to sync")
  ; Use git if available
  if has-git?() :
    val path = /path(dep)

    ; Grab head hash
    val head-hash = git-rev-parse!(path, "HEAD")
    debug("head-hash: %_" % [head-hash])

    ; Check for "v*.*.*" or "*.*.*" tag
    val vers = /version(dep)
    val tag-candidates = [to-string("v%~" % [vers]), to-string(vers)]
    val tag? = for tag in tag-candidates find :
      run-git-command-in-dir(path, ["ls-remote", "-q", "-t", "--exit-code",
        "origin", tag], quiet = true, throw-on-error = false) == 0
    val tag = match(tag?) :
      (tag:String) :
        debug("using tag %_ for dependency %_" % [tag, name(dep)])
        tag
      (_) :
        throw(Exception("Could not checkout version %_ for dependency %_" %
          [vers, name(dep)]))

    ; Fetch and checkout
    val refspec = to-string("+refs/tags/%_:refs/tags/%_" % [tag, tag])
    run-git-command-in-dir(path, ["fetch", "--quiet", "origin", refspec])
    val tag-hash = git-rev-parse!(path, tag, peel? = true)
    debug("tag-hash: %_" % [tag-hash])

    if tag-hash != head-hash:
      info("syncing %_ to %~" % [colored-name?(dep), colored-version?(dep)])
      run-git-command-in-dir(path, ["checkout", "--quiet", "--force", tag])
  else :
    ; Fallback to libgit2
    debug("falling back to libgit for sync")
    libgit-sync-dependency(dep)
  false
