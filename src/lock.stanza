defpackage slm/lock:
  import core

  import maybe-utils
  import semver
  import toml/file
  import toml/parser
  import toml/table

  import slm/logging
  import slm/utils

; What is a lock file?
; A lock file replaces your slm.toml -- if it is present, your slm.toml is
; functionally ignored when you run `slm build`
;
; That means it must encode each dependency's exact hash as well as its
; version and name.
;
; The format of a slm.lock file is as follows:
; <dependency-name> = { version = "<tag>", (locator = "<uri>")? hash = "<hash>" }

public deftype LockedDependency
public defmulti name (d: LockedDependency) -> String

public defstruct LockedPathDependency <: LockedDependency:
  name: String with: (as-method => true)

public defstruct LockedGitDependency <: LockedDependency:
  name: String with: (as-method => true)
  locator: String
  version: SemanticVersion
  hash: String

public defn parse-slm-lock-file (path: String) -> Tuple<LockedDependency>:
  val table = path $> parse-file $> table $> to-seq $> pairs
  to-tuple $ for [name, dependency] in table seq:
    match(dependency: TomlTable):
      match(get?(dependency, "locator"), get?(dependency, "version"), get?(dependency, "hash")):
        (locator?: One, version?: One, hash?: One):
          val locator = value!(locator?) as String
          val version = value!(version?) $> parse-semver $> value!
          val hash    = value!(hash?) as String
          LockedGitDependency(name, locator, version, hash)
        (locator: None, version: None, hash: None):
          LockedPathDependency(name)
        (locator, version, hash):
          error("lock entry '%_' invalid: has it been corrupted?" % [name])
    else:
      error("lock format invalid: has it been corrupted?")
