defpackage slm/main:
  import core
  import collections
  import arg-parser
  import maybe-utils
  import slm/utils
  import slm/logging
  import slm/commands
  import slm/flags

val CMDS = Vector<Command>()

defn setup-opts ():
  add(CMDS, setup-add-cmd())
  add(CMDS, setup-add-task-cmd())
  add(CMDS, setup-build-cmd())
  add(CMDS, setup-clean-cmd())
  add(CMDS, setup-init-cmd())
  add(CMDS, setup-publish-cmd())
  add(CMDS, setup-remove-cmd())
  add(CMDS, setup-repl-cmd())
  add(CMDS, setup-run-cmd())
  add(CMDS, setup-version-cmd())

val SLM-DESCR-TMP = \<MSG>
slm - Stanza Library Manager

Invocation:
slm [%_]

This tool provides a means of creating, building, and publishing
stanza libraries and tools. Think of it as something similar to
rust's 'cargo'.

Environment Variables:

- 'SLM_DEBUG' - If the user sets this variable, then verbose
    debug logging will be created.
- 'SLM_COLOR' - If the user sets this variable to 'never' then
    terminal colors will be disabled. Terminal colors are
    enabled by default.
- 'SLM_PROTOCOL' - This variable can select the transport protocol
    used to download dependencies from Github.
    'https' -> HTTPS Protocol
    'ssh' -> SSH Protocol
    The default is 'https'.
- 'SLM_STANZA' = This variable can select the name and/or path to
    the stanza executable. This allows for usage with macro extended
    compilers. If set, this value will override the 'compiler'
    setting in the `slm.toml` file.

Configuration File:

The 'slm.toml' file is the main configuration file for a project
managed by 'slm'. This file should be found in the root directory
of the project. It is a formatted with "Tom's Obvious Minimal Language"
which is a minimal configuration format. See https://toml.io/ for more
info.

Configuration Keys:

- name           :  Name of the project. This should match the
                    top-level namespace of the packages defined in
                    this project. This string should be a valid stanza
                    identifier.
- version        :  Current Version of the Project. This string should
                    be a semantic version format. It will be passed to
                    the project at build time via environment variable.
                    See the 'build' command for more info.
- compiler       :  Optional compiler executable name/filepath to override
                    the default of 'stanza'.
- stanza-version :  Optional compatible Stanza Version for this Project. If
                    this value is provided then the stanza binary that builds
                    the project will be inspected. If the binary version is not
                    compatible with the string version listed here, then the
                    build or repl will fail with an error message.
- dependencies   :  Table with key-value pairs that indicate the dependencies
                    for this project. See more info below.

Example Configuration File:

"""
name = "slm"
version = "0.3.2"
stanza-version = "0.18.2"
[dependencies]
stanza-toml.git = "StanzaOrg/stanza-toml"
stanza-toml.version = "0.3.4"
maybe-utils.git = "StanzaOrg/maybe-utils"
maybe-utils.version = "0.1.4"
semver      = { git = "StanzaOrg/semver", version = "0.1.4" }
term-colors = { git = "StanzaOrg/term-colors", version = "0.1.1" }
"""

Notice the identical means of expressing a TOML table using either dot-separated
syntax or the more JSON-like syntax.

Dependency Declarations:

The dependency declarations include a project name followed by a
resolution object for that project. The resolution paths come in two
forms:

1.  Github Resolution

The github resolution is a String formatted as:

dep-project = { git = "ORG/PROJECT", version = "SEMVER" }

 - dep-project = Name of the dependency we are resolving.
 - git - Required path to repository on Github
   - ORG = The Github Organization where the project can be found.
   - PROJECT = Name of the project under the github org.
 - version - Required version for the dependency.
   - SEMVER = Semantic version for the project. This semantic version
     must match a tag on the 'https://github.com/ORG/PROJECT' repository.

2.  File Path Resolution

The File Path resolution is an "Inline Table" object in the form:

dep-project = { path = "/Full/Path/Here" }

The 'path' attribute of this object makes reference to a file path
on the local computer that is accessible through the filesystem.

The string value of the 'path' attribute supports environment
variable substitution with the following syntax:

dep-project = { path = "{HOME}/src/path/here" }

Where 'slm' will check the environment for the 'HOME' environment
variable and directly substitute that string if found. If no environment
variable by that name is found, this is an error and will cause the `slm`
build to fail.

Path Resolution can also have an optional 'version' key that specifies a
semantic version requirement for the referenced path dependency:

dep-project = { path = "{HOME}/proj", version="1.2.0" }

This will enforce a compatibility requirement for the referenced path
dependency. The path dependency will need to be in the 'v1.x.y' series
where x >= 2.

Note about Windows:

Paths on Windows can be represented with backslash '\' separators or
with forward slash '/' separators. All paths will be converted to forward
slash '/' when written to files. The '\' presents some issues when used
in 'stanza.proj' files. In 'stanza.proj' files the '\' character must be
escaped (ie, '\\' ) otherwise, stanza will fail to parse the path correctly.
Using forward slash avoids this problem.

<MSG>

defn main ():
  ; What operations do we want `slm` to perform?
  ;
  ; 1. Initialize packages
  ;   - Initialize slm.toml
  ;   - Initialize stanza.proj
  ;
  ; 2. Build packages
  ;   - Check that dependencies have been fetched
  ;   - Build the project

  setup-opts()

  val cmd_list = to-tuple $ for cmd in CMDS seq:
    name(cmd)
  val cmd_list_str = string-join(cmd_list, '|')

  val SLM-DESCR = to-string(SLM-DESCR-TMP % [cmd_list_str])

  simple-command-line-cli(
    description = SLM-DESCR,
    commands = to-tuple(CMDS),
    default-command = false,
    help? = true
  )


main()
