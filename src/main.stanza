defpackage slm/main:
  import core
  import collections
  import arg-parser
  import maybe-utils
  import slm/utils
  import slm/logging
  import slm/commands
  import slm/flags

val CMDS = Vector<Command>()

defn setup-opts ():
  add(CMDS, setup-build-cmd())
  add(CMDS, setup-clean-cmd())
  add(CMDS, setup-init-cmd())
  add(CMDS, setup-publish-cmd())
  add(CMDS, setup-repl-cmd())
  add(CMDS, setup-version-cmd())

val SLM-DESCR = \<MSG>
slm - Stanza Library Manager

Invocation:
slm [build|clean|init|repl|publish]

This tool provides a means of creating, buliding, and publishing
stanza libraries and tools. Think of it as something similar to
rust's 'cargo'.

Environment Variables:

- 'SLM_DEBUG' - If the user sets this variable, then verbose
    debug logging will be created.
- 'SLM_COLOR' - If the user sets this variable to 'never' then
    terminal colors will be disabled. Terminal colors are
    enabled by default.
- 'SLM_PROTOCOL' - This variable can select the transport protocol
    used to download dependencies from Github.
    'https' -> HTTPS Protocol
    'git' -> Git Protocol
    The default is 'git'.

<MSG>

defn main ():
  ; What operations do we want `slm` to perform?
  ;
  ; 1. Initialize packages
  ;   - Initialize slm.toml
  ;   - Initialize stanza.proj
  ;
  ; 2. Build packages
  ;   - Check that dependencies have been fetched
  ;   - Build the project

  if get-env("SLM_DEBUG") is String:
    slm/flags/debug? = true

  setup-opts()

  simple-command-line-cli(
    description = SLM-DESCR,
    commands = to-tuple(CMDS),
    default-command = false,
    help? = true
  )


main()
