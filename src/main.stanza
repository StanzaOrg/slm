defpackage slm/main:
  import core
  import maybe-utils
  import slm/utils
  import slm/logging
  import slm/commands
  import slm/flags

defn main ():
  ; What operations do we want `slm` to perform?
  ;
  ; 1. Initialize packages
  ;   - Initialize slm.toml
  ;   - Initialize stanza.proj
  ;
  ; 2. Build packages
  ;   - Check that dependencies have been fetched
  ;   - Build the project

  val args = command-line-arguments()
  if length(args) < 2:
    error-with-usage("Not enough arguments given.")

  if get-env("SLM_DEBUG") is String:
    slm/flags/debug? = true

  try:
    val command = args[1]
    switch(command):
      "build":
        slm/commands/build(to-tuple $ args[2 to false])
      "clean":
        slm/commands/clean()
      "init":
        slm/commands/init(nth?(args, 2))
      "publish":
        slm/commands/publish()
      "repl":
        slm/commands/repl(to-tuple $ args[2 to false])
      else:
        error-with-usage("Invalid argument given: `%_`" % [command]) 
  catch (e: Exception):
    error("%_" % [e])

main()
