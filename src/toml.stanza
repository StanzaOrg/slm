defpackage slm/toml:
  import core
  import collections

  import maybe-utils
  import toml/file
  import toml/parser
  import toml/table
  import toml/value

  import slm/dependency
  import slm/logging
  import slm/utils

public defstruct SlmToml:
  name: String
  version: String
  compiler?: Maybe<String>
  dependencies: HashTable<String, Dependency> with: (updater => sub-deps)

doc: \<DOC>
Parse the SLM TOML configuration file

@param path Path to the file to parse.
@param env-sub-enable Allow environment variable substitutions.
This will replace strings like `{HOME}` with environment variable
values if they exist.
<DOC>
public defn parse-slm-toml (path: String -- env-sub-enable:True|False = true) -> SlmToml:
  val table = path $> parse-file $> table
  val name = table["name"] as String
  val version = table["version"] as String
  val compiler? = match(get?(table, "compiler")):
    (x:None): x
    (x:One<TomlValue>):  One(value(x) as String)
  val dependencies = to-hashtable<String, Dependency> $
    for [name, specifier] in pairs(table["dependencies"] as TomlTable) seq:
      name => match(specifier):
        (specifier: String):
          parse-git-dependency(name, specifier)
        (table: TomlTable):
          val version? = match(get?(table, "version")):
            (x:None): x
            (x:One<TomlValue>): One(value(x) as String)
          parse-path-dependency(name, table["path"] as String, version?, env-sub-enable)
        (_):
          error("invalid slm.toml: '%_' is not a valid dependency specifier"
                % [specifier])

  SlmToml(name, version, compiler?, dependencies)

doc: \<DOC>
Output the SlmToml config as a valid TOML file.
<DOC>
public defmethod write (o:OutputStream, cfg:SlmToml) :
  println(o, "name = \"%_\"" % [name(cfg)])
  println(o, "version = \"%_\"" % [version(cfg)])
  match(compiler?(cfg)):
    (x:One<String>): println(o, "compiler = \"%_\"" % [x] )
    (_:None): false
  println(o, "[dependencies]")
  for dep in values(dependencies(cfg)) do:
    println(o, dep)

public defn find-dependency (cfg:SlmToml, name:String) -> Maybe<Dependency> :
  val deps = dependencies(cfg)
  for dep-name in keys(deps) first :
    One(deps[name]) when name == dep-name else None()
