defpackage slm/process-utils:
  import core

  import maybe-utils
  import slm/file-utils

public defstruct ProcessBuilder:
  args: Tuple<String>
  working-dir?: Maybe<String> with: (
    default => None(),
    updater => sub-working-dir?
    )
  output?: True|False with: (
    default => false,
    updater => sub-output?
    )
  error-stream? : True|False with: (
    default => false,
    updater => sub-error-stream?
  )
  env-vars: Tuple<KeyValue<String, String>> with: (
    default => [],
    updater => sub-env-vars
    )

public defn with-output (builder: ProcessBuilder) -> ProcessBuilder:
  sub-output?(builder, true)

public defn with-error-stream (builder: ProcessBuilder) -> ProcessBuilder :
  sub-error-stream?(builder, true)

public defn in-dir (builder: ProcessBuilder, dir: String) -> ProcessBuilder:
  sub-working-dir?(builder, One(dir))

public defn with-env-vars (builder:ProcessBuilder, env-vars:Tuple<KeyValue<String, String>>) -> ProcessBuilder :
  sub-env-vars(builder, env-vars)

public defn build (builder: ProcessBuilder) -> Process:
  val args = args(builder)
  val output-stream = if output?(builder): (PROCESS-OUT) else: (STANDARD-OUT)
  val err-stream = if error-stream?(builder): (PROCESS-OUT) else: (STANDARD-ERR)
  val workdir = value-or(working-dir?(builder), false)
  val env-vars = env-vars(builder)
  Process(args[0], args, STANDARD-IN, output-stream, err-stream, workdir, env-vars)

public defn get-output (p: Process) -> String:
  slurp-stream(output-stream(p))

public defn get-error-stream (p:Process) -> String:
  slurp-stream(error-stream(p))

public defn wait-process-throw-on-nonzero (
  process: Process
  error: Exception|Printable|String
) -> Int:
  defn throw-if-non-zero (code: Int) -> Int:
    if code != 0:
      throw $ match(error):
        (e: Exception): e
        (e: Printable|String): Exception(to-string(e))
    code
  match(wait(process)):
    (code:ProcessDone): throw-if-non-zero(value(code))
    (_): throw-if-non-zero(-1)

public defn run-command-throw-on-error (
  args: Tuple<String>
  error: Exception|Printable|String
) -> Int:
  wait-process-throw-on-nonzero(Process(args[0], args), error)

public defn command-output-in-dir (
  dir: String,
  args: Tuple<String>,
) -> String:
  ProcessBuilder(args)
    $> in-dir{_, dir}
    $> with-output
    $> build
    $> get-output
    $> trim

public defn run-and-get-exit-code (p: Process) -> Int:
  match(wait(p)):
    (s:ProcessDone): value(s)
    (s:ProcessStopped|ProcessTerminated): signal(s)
    (_): -1
