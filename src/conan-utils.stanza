defpackage slm/conan-utils:
  import core
  import collections

  import curl
  import json
  import maybe-utils
  import semver
  import toml

  import slm/utils
  import slm/logging
  import slm/file-utils
  import slm/process-utils

val DEFAULT-CONAN-URL = "http://conan.jitx.com:8081/artifactory/api/conan/conan-local"

doc: \<DOC>
A structure for holding all of the components of a fully-qualified conan version
https://docs.conan.io/2/tutorial/versioning/revisions.html

@throws InvalidVersionError If we fail to parse the version string from stanza
<DOC>
public defstruct ConanVersion <: Equalable :
  name:String with: ( ensure => ensure-not-empty! )
  version: String with: ( ensure => ensure-not-empty! )
  recipe_revision: String|False
  package_id: String|False
  package_revision: String|False


doc: \<DOC>
A constructor to parse a fully-qualified conan version string into a ConanVersion

@param s string in the form "a/b#cccccccccccccccccccccccccccccccc:dddddddddddddddddddddddddddddddddddddddd#eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
         where only "a/b" is mandatory
@throws InvalidVersionError If we fail to parse the version string from stanza
<DOC>
public defn ConanVersion (s:String) -> ConanVersion :
  debug("ConanVersion: s==\"%_\"" % [s])
  ; name before slash
  val nvslash = index-of-char(s, '/')
  val name = s[0 to nvslash]
  var verrev
  match(nvslash):
    (i:Int) : verrev = s[(i + 1) to false]
    (i:False) : throw(Exception("Version string must contain a slash character"))
  var version = ""
  var recipe_rev:String|False = false
  var package_id:String|False = false
  var package_rev:String|False = false
  ; split after slash and before colon
  val vpcolon = index-of-char(verrev, ':')
  debug("ConanVersion: name==\"%_\"" % [name])
  debug("ConanVersion: verrev==\"%_\"" % [verrev])
  debug("ConanVersion: vpcolon==%_" % [vpcolon])
  match(vpcolon):
    (i:Int) :
      debug("ConanVersion: before colon: \"%_\"" % [verrev[0 to i]])
      debug("               after colon: \"%_\"" % [verrev[(i + 1) to false]])
      val rhash = index-of-char(verrev[0 to i], '#')
      debug("ConanVersion: rhash1==%_" % [rhash])
      match(rhash):
        (j:Int) :
          version = verrev[0 to rhash]
          recipe_rev = verrev[(j + 1) to i]
        (False) :
          version = verrev[0 to i]
      ; split after colon
      val pidrev = verrev[(i + 1) to false]
      debug("ConanVersion: pidrev==\"%_\"" % [pidrev])
      val phash = index-of-char(pidrev, '#')
      debug("ConanVersion: phash==%_" % [phash])
      package_id = pidrev[0 to phash]
      match(phash):
        (j:Int) : package_rev = pidrev[(j + 1) to false]
        (False) : false
    (i:False) :
      val rhash = index-of-char(verrev, '#')
      debug("ConanVersion: rhash2==%_" % [rhash])
      version = verrev[0 to rhash]
      match(rhash):
        (j:Int) : recipe_rev = verrev[(j + 1) to false]
        (False) : false

  debug("ConanVersion( \"%_\", \"%_\", \"%_\", \"%_\", \"%_\" )" % [name, version, recipe_rev, package_id, package_rev])
  ConanVersion(name, version, recipe_rev, package_id, package_rev)


public defmethod to-string (cv:ConanVersion) -> String :
  val s = StringBuffer()
  add-all(s, name(cv))
  add(s, '/')
  add-all(s, version(cv))
  if recipe_revision(cv) != false:
    add(s, '#')
    add-all(s, recipe_revision(cv) as String)
  if package_id(cv) != false:
    add(s, ':')
    add-all(s, package_id(cv) as String)
    ; only use package_revision if there was a package_id
    if package_revision(cv) != false:
      add(s, '#')
      add-all(s, package_revision(cv) as String)
  to-string(s)


;------------------------
;--- Conan API syntax ---
;------------------------
;--- Search for package by name
; curl $APIBASE/conans/search?q=pcre
; {
;   "results" : [ "pcre/8.45@_/_" ]
; }
;
;--- Use results to search for binary packages:
; curl $APIBASE/conans/pcre/8.45/_/_/search
; {
;   "139391a944851d9dacf1138cff94b3320d5775dd" : {
;     "settings" : {
;       "os" : "Windows",
;       "compiler.threads" : "posix",
;       "compiler.exception" : "seh",
;       "arch" : "x86_64",
;       "compiler" : "gcc",
;       "build_type" : "Release",
;       "compiler.version" : "11.2"
;     },
; (...)
;
; ; list revisions of a package for a specific recipe revision
; curl -v 'http://conan.jitx.com:8081/artifactory/api/conan/conan-local/v2/conans/pcre/8.45/_/_/revisions/125d5f684fea10391ff4cbcd809a5c74/packages/6f7dea16aa97d9ca0f6b67b413781234ab190708/revisions'
;
;--- Use hash to get download url
; curl $APIBASE/conans/pcre/8.45/_/_/packages/139391a944851d9dacf1138cff94b3320d5775dd/download_urls
; {
;   "conaninfo.txt" : "http://localhost:8082/artifactory/api/conan/conan-local/v2/files/_/pcre/8.45/_/125d5f684fea10391ff4cbcd809a5c74/package/139391a944851d9dacf1138cff94b3320d5775dd/ce6f2349e761f6350cbde62b02a687c7/conaninfo.txt",
;   "conan_package.tgz" : "http://localhost:8082/artifactory/api/conan/conan-local/v2/files/_/pcre/8.45/_/125d5f684fea10391ff4cbcd809a5c74/package/139391a944851d9dacf1138cff94b3320d5775dd/ce6f2349e761f6350cbde62b02a687c7/conan_package.tgz",
;   "conanmanifest.txt" : "http://localhost:8082/artifactory/api/conan/conan-local/v2/files/_/pcre/8.45/_/125d5f684fea10391ff4cbcd809a5c74/package/139391a944851d9dacf1138cff94b3320d5775dd/ce6f2349e761f6350cbde62b02a687c7/conanmanifest.txt"
; }
;
;--- Use the url for "conan_package.tgz"
; http://localhost:8082/artifactory/api/conan/conan-local/v2/files/_/pcre/8.45/_/125d5f684fea10391ff4cbcd809a5c74/package/139391a944851d9dacf1138cff94b3320d5775dd/ce6f2349e761f6350cbde62b02a687c7/conan_package.tgz

doc: \<DOC>
search for the available recipe revisions for the given package name on the conan server
@params curl: an OPEN curl handle.  This function does not free the given handle.
@throws JSONParseException on invalid json returned
<DOC>
defn conan-get-recipe-revisions (package_name:String, package_version:String, curl:Curl, -- headers:Tuple<String> = [], repourl:String = DEFAULT-CONAN-URL) -> Tuple<JSON>:
  var queryurl = to-string("%_/v2/conans/%_/%_/_/_/revisions" % [repourl, url-encode(package_name), url-encode(package_version)])
  var response = read-url(curl, headers, queryurl)
  val jresult = parse(response) as JObject
  if key?(jresult, "errors"):
    throw(Exception("Conan error while getting recipe revisions for \"%_/%_\": \"%_\"" % [package_name, package_version, to-json-string(jresult)]))
  jresult["revisions"] as Tuple<JSON>


doc: \<DOC>
search for the available package_ids for the given package name and recipe revision on the conan server
@params curl: an OPEN curl handle.  This function does not free the given handle.
@throws JSONParseException on invalid json returned
<DOC>
defn conan-get-package-ids-for-revision (package_name:String, package_version:String, recipe_revision:String,
                                         curl:Curl, -- headers:Tuple<String> = [], repourl:String = DEFAULT-CONAN-URL) -> Tuple<KeyValue<String, JSON>>:
  ; search for available package_ids of the recipe revision
  val queryurl = to-string("%_/v2/conans/%_/%_/_/_/revisions/%_/search" % [repourl, url-encode(package_name), url-encode(package_version), url-encode(recipe_revision)])
  val response = read-url(curl, headers, queryurl)
  val jresult = parse(response) as JObject
  if key?(jresult, "errors"):
    throw(Exception("Conan error while getting package_ids for recipe revision \"%_/%_#%_\": \"%_\"" % [package_name, package_version, recipe_revision, to-json-string(jresult)]))
  entries(jresult)


defn conan-get-package-revisions (package_name:String, package_version:String, recipe_revision:String, package_id:String,
                                  curl:Curl, -- headers:Tuple<String> = [], repourl:String = DEFAULT-CONAN-URL) -> Tuple<JSON>:
  ; search for available package revisions of the given recipe revision and package_id
  val queryurl = to-string("%_/v2/conans/%_/%_/_/_/revisions/%_/packages/%_/revisions" % [
                           repourl, url-encode(package_name), url-encode(package_version), url-encode(recipe_revision), url-encode(package_id)])
  val response = read-url(curl, headers, queryurl)
  val jresult = parse(response) as JObject
  if key?(jresult, "errors"):
    throw(Exception("Conan error while getting package revisions for package_id \"%_/%_#%_\": \"%_\"" % [package_name, package_version, recipe_revision, to-json-string(jresult)]))
  jresult["revisions"] as Tuple<JSON>


defn conan-get-latest-revision (package_name:String, package_version:String, recipe_revision:String, package_id:String,
                                curl:Curl, -- headers:Tuple<String> = [], repourl:String = DEFAULT-CONAN-URL) -> Maybe<ConanVersion>:
  label<Maybe<ConanVersion>> return :
    for pr in conan-get-package-revisions(package_name, package_version, recipe_revision, package_id, curl, headers = headers, repourl = repourl) do:
      val package_revision = to-string((pr as JObject)["revision"])
      val package_revision_time = to-string((pr as JObject)["time"])
      debug("conan-fully-qualify-latest-version: package_revision: \"%_\" on \"%_\"" % [package_revision, package_revision_time])

      ; NOTE: assuming that the most recent revision is listed first
      ; if this turns out not to be the case, then sort by package_revision_time
      val fqcv = ConanVersion(package_name, package_version, recipe_revision, package_id, package_revision)
      debug("conan-fully-qualify-latest-version: found \"%_\"" % [to-string(fqcv)])
      return(One $ fqcv)

    ; if we reach here, we didn't find a match
    None()

doc: \<DOC>
Returns the current platform os string as expected by Conan.
"Linux", "Macos", or "Windows"
<DOC>
defn conan-get-current-os () -> String :
  match(CURRENT-PLATFORM) :
    (p:Linux) : "Linux"
    (p:OS-X) : "Macos"
    (p:Windows) : "Windows"

doc: \<DOC>
Convert TomlTable of conan package options to a hashtable, and remove the platform-specific option trees along the way.
<DOC>
defn toml-options-to-hashtable-without-platform-options (options:TomlTable = TomlTable()) -> HashTable<String,String> :
  val hto = HashTable<String,String>()
  for o in entries(options) do:
    switch(key(o)):
      ; ignore any platform-specific options tables at this point
      "linux": false
      "macos": false
      "windows": false
      else:
        debug("toml-options-to-hashtable-without-platform-options: requested option \"%_\" = \"%_\"" % [key(o), value(o)])
        hto[to-string(key(o))] = to-string(value(o))
  hto

doc: \<DOC>
Convert json list of conan package options to a hashtable.
<DOC>
defn json-options-to-hashtable (json-options:JObject) -> HashTable<String,String> :
  val hto = HashTable<String,String>()
  for o in json-options do:
    debug("toml-options-to-hashtable: option \"%_\" = \"%_\"" % [key(o), value(o)])
    hto[to-string(key(o))] = to-string(value(o))
  hto

doc: \<DOC>
Apply any options given in platform-options to the existing options in the given hashtable.
<DOC>
defn apply-platform-options-to-hashtable (platform-options: TomlTable, hto: HashTable<String,String>) -> HashTable<String,String> :
  debug("apply-platform-options-to-hashtable: found platform-specific options: \"%_\"" % [to-string(entries(platform-options))])
  for o in entries(platform-options) do:
    debug("apply-platform-options-to-hashtable: platform-specific option \"%_\" = \"%_\"" % [key(o), value(o)])
    set(hto, to-string(key(o)), to-string(value(o)))
  hto

defn log-table-diffs (logfn, a:Table, b:Table) :
  if length(a) != length(b) :
    logfn("log-table-diffs: length %_ vs %_" % [length(a), length(b)])
    for ak in keys(a) do: if not key?(b, ak): logfn("log-table-diffs: A missing %_" % [ak])
    for bk in keys(b) do: if not key?(a, bk): logfn("log-table-diffs: B missing %_" % [bk])
  else:
    for entry in b do :
      val bkey = key(entry)
      val bval = value(entry)
      if key?(a, bkey) :
        val aval = a[bkey]
        match(bval):
          (t:Table): same-contents?(aval, bval)
          (_):
            if not equal?(aval, bval):
              logfn("log-table-diffs: values differ for key \"%_\": \"%_\" vs \"%_\"" % [bkey, aval, bval])
      else:
        logfn("log-table-diffs: missing key %_" % [bkey])

defn conan-get-full-version-for-package-with-platform-and-options (package_name:String, package_version:String, recipe_revision:String,
                                         current_conan_os: String, ht-requested-options: HashTable<String,String>,
                                         curl:Curl, -- headers:Tuple<String> = [], repourl:String = DEFAULT-CONAN-URL) -> Maybe<ConanVersion> :
  label<Maybe<ConanVersion>> return :
    for p in conan-get-package-ids-for-revision(package_name, package_version, recipe_revision, curl, headers = headers, repourl = repourl) do:
      val package_id = key(p)
      val package_info = value(p) as JObject
              ;;; package_info format:
              ; {
              ; "settings":     {
              ;         "os":   "Windows",
              ;         "compiler.threads":     "posix",
              ;         "compiler.exception":   "seh",
              ;         "arch": "x86_64",
              ;         "compiler":     "gcc",
              ;         "build_type":   "Release",
              ;         "compiler.version":     "11.2"
              ; },
              ; "options":      {
              ;         "build_pcrecpp":        "False",
              ;         "build_pcre_16":        "False",
              ;         "build_pcre_8": "True",
              ;         "shared":       "True",
              ;         "with_stack_for_recursion":     "True",
              ;         "build_pcregrep":       "False",
              ;         "build_pcre_32":        "False",
              ;         "with_utf":     "True",
              ;         "with_unicode_properties":      "True",
              ;         "with_jit":     "False"
              ; }

      ; look for packages compiled for the current os we're running on
      ; TODO this could be improved with arch and compiler checks
      ;      but for now just check os
      var package_settings_os = ""
      if key?(package_info, "settings"):
        if key?((package_info["settings"] as JObject), "os"):
          package_settings_os = to-string((package_info["settings"] as JObject)["os"])
      ; if package_settings_os is blank, it should match any current os
      if package_settings_os != current_conan_os and package_settings_os != "":
        ; not our os
        debug("conan-get-full-version-for-package-with-platform-and-options: package \"%_\" os = \"%_\" [SKIP]" % [package_id, package_settings_os])
      else:
        debug("conan-get-full-version-for-package-with-platform-and-options: package \"%_\" os = \"%_\" [ok]" % [package_id, package_settings_os])

        ; convert package options to hashtable
        val htpo = json-options-to-hashtable(package_info["options"] as JObject)

        ; compare hashtables by value
        if same-contents?(htpo,ht-requested-options):
          ; this package matches our os and the requested options
          ; get the latest revision for this package
          return(conan-get-latest-revision(package_name, package_version, recipe_revision, package_id, curl, headers = headers, repourl = repourl))
        else:
          ; debug log the diffs
          log-table-diffs(debug, htpo, ht-requested-options)

    ; if we reach here, we didn't find a match
    None()

doc: \<DOC>
Searches the given conan repository for the latest package matching the given ConanVersion and options.
@throws Exception on failure or package not found
<DOC>
public defn conan-fully-qualify-latest-version (cv:ConanVersion, -- options:TomlTable = TomlTable(), repourl:String = DEFAULT-CONAN-URL) -> ConanVersion :
  label<ConanVersion> return :
    debug("conan-fully-qualify-latest-version: qualifying version: %_" % [to-string(cv)])
    ; If the cv has already has all of the parts, then return it unchanged
    if not (package_id(cv) == false or recipe_revision(cv) == false or package_revision(cv) == false):
      return(cv)
    else:
      ; cv was missing a revision or package_id, so search the server for the latest matching package
      ; curl $APIBASE/conans/pcre/8.45/_/_/search
      val headers = ["Content-Type: application/json"]
      var curl = Curl()
      try :
        val package_name = name(cv)
        val package_version = version(cv)

        ; get the current os as expected by conan
        val current_conan_os = conan-get-current-os()
        val current_conan_os_lc = lower-case(current_conan_os)

        ; convert requested options to hashtable
        var htro = toml-options-to-hashtable-without-platform-options(options)

        ; Look for platform-specific options (if any) and apply them to the
        ; requested options hashtable, overrding existing values.  Ignore other platforms.
        debug("conan-fully-qualify-latest-version: looking for platform-specific options")
        match(get-table?(options, current_conan_os_lc)):
          (platform-options: One<TomlTable>):
            htro = apply-platform-options-to-hashtable(value!(platform-options), htro)
          (_):
            debug("apply-platform-options-to-hashtable: no platform-specific options found for platform \"%_\"" % [current_conan_os_lc])

        ; search for available recipe revisions
        for rr in conan-get-recipe-revisions(package_name, package_version, curl, headers = headers, repourl = repourl) do:
          val recipe_revision = to-string((rr as JObject)["revision"])
          val recipe_revision_time = to-string((rr as JObject)["time"])
          debug("conan-fully-qualify-latest-version: recipe_revision: \"%_\" on \"%_\"" % [recipe_revision, recipe_revision_time])

          match(conan-get-full-version-for-package-with-platform-and-options(package_name, package_version, recipe_revision, current_conan_os, htro,
                                                                             curl, headers = headers, repourl = repourl)):
            (cv: One<ConanVersion>): return(value!(cv))
            (_): false

      finally :
        free(curl)
    ; if we reach here, we didn't find a match
    throw(Exception("conan search could not find matching package for options"))

doc: \<DOC>
returns path to downloaded file or True if file already exists
@throws Exception on failure or package not found
<DOC>
public defn conan-download-package (cv:ConanVersion, -- options:TomlTable = TomlTable(), repourl:String = DEFAULT-CONAN-URL, target_directory:String = ".") -> String|True :
  debug("conan-download-package: downloading version: %_" % [to-string(cv)])
  val headers = ["Content-Type: application/json"]
  var curl = Curl()
  try :
    val fqcv = conan-fully-qualify-latest-version(cv, options = options, repourl = repourl)

    if package_id(fqcv) == false or recipe_revision(fqcv) == false or package_revision(fqcv) == false:
      throw(Exception("conan version must be fully specified with revisions and package_ids"))

    val downloadurl = to-string("%_/v2/conans/%_/%_/_/_/revisions/%_/packages/%_/revisions/%_/files/conan_package.tgz" % [
                                repourl, url-encode(name(fqcv)), url-encode(version(fqcv)), url-encode(to-string(recipe_revision(fqcv))),
                                url-encode(to-string(package_id(fqcv))), url-encode(to-string(package_revision(fqcv)))])
    debug("conan-download-package: downloadurl: \"%_\"" % [downloadurl])

    val cache_dir = append(target_directory, to-string("/.slm/cache"))
    create-dir-recursive(cache_dir)
    val outfile = append(cache_dir, to-string("/conan_package_%__%__%_.tgz" % [name(fqcv), version(fqcv), package_id(fqcv)]))

    if file-exists?(outfile):
      debug("conan-download-package: skipping outfile: \"%_\"" % [outfile])
      true
    else:
      debug("conan-download-package: outfile: \"%_\"" % [outfile])
      info("fetching %_" % [to-string(cv)])
      read-url-to-file(curl, headers, downloadurl, outfile)
      outfile

  finally :
    free(curl)
