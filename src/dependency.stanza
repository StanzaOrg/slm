defpackage slm/dependency:
  import core

  import semver
  import term-colors
  import maybe-utils

  import slm/logging
  import slm/utils

public deftype Dependency
public defmulti name (d: Dependency) -> String
public defmulti path (d: Dependency) -> String
public defmulti version-string? (d: Dependency) -> Maybe<String>:
  None()

; Dependencies specified by path (e.g. `foo = { path = "../foo" }`)
public defstruct PathDependency <: Dependency:
  name: String with: (as-method => true)
  path: String with: (as-method => true)

; Dependencies specified by Git locator/version (e.g. `foo = "myorg/myuser|1.0.0"`)
public defstruct GitDependency <: Dependency:
  name: String with: (as-method => true)
  locator: String
  version: SemanticVersion
  hash: String with: (updater => sub-hash)

defmethod path (d: GitDependency):
  to-string(".slm/deps/%_" % [name(d)])

defmethod version-string? (d: GitDependency) -> One<String>:
  One(version-string(d))

public defn version-string (d: GitDependency) -> String:
  to-string(version(d))

public defn colored-version? (d: GitDependency) -> ColoredString:
  ColoredString(version-string(d))
    $> bold $> foreground{_, TerminalBrightGreen}
    $> clear-color?

public defn colored-name? (d: Dependency) -> ColoredString:
  ColoredString(name(d))
    $> bold $> foreground{_, TerminalBrightWhite}
    $> clear-color?

public defn parse-git-dependency (name: String, specifier: String):
  GitDependency(name, locator, requested-version, hash)
where:
  val [locator, requested-version] = parse-specifier(specifier)
  val hash = ""

defn parse-specifier (specifier: String) -> [String, SemanticVersion]:
  val elements = to-tuple $ split(specifier, "|")
  switch(length(elements)):
    2:
      val url = elements[0]
      val version = elements[1]
        $> parse-semver
        $> expect{_, "couldn't parse '%_'" % [specifier]}
      [url, version]
    else:
      error("malformed specifier '%_'" % [specifier])

public defn parse-path-dependency (name: String, path: String) -> PathDependency:
  PathDependency(name, path)
