defpackage slm/dependency:
  import core

  import semver
  import term-colors
  import maybe-utils

  import slm/logging
  import slm/utils
  import slm/file-utils
  import slm/string-utils
  import slm/flags

public deftype Dependency
public defmulti name (d: Dependency) -> String
public defmulti path (d: Dependency) -> String
public defmulti version-string? (d: Dependency) -> Maybe<String>:
  None()
public defmulti dependency-type-name (d:Dependency) -> String

doc: \<DOC>
Indicates whether a dependency should be parsed recursively.

Typical dependencies like git/path depedencies have a `slm.toml`
file that we will need to parse and then recursively discover
dependencies with.

Other deps, like the `TaskDependency` does not have an `slm.toml`
and is primarily for executing a command/process for external
initialization.
<DOC>
public deftype RecursiveDependency <: Dependency
public defmulti recursive (d:Dependency) -> True|False
defmethod recursive (d:Dependency) -> True|False :
  false
defmethod recursive (d:RecursiveDependency) -> True|False :
  true

doc: \<DOC>
Tool for filtering dependencies for recursives only.
<DOC>
public defn recursive-deps-only (deps:Seqable<Dependency>) -> Seqable<RecursiveDependency> :
  filter-by<RecursiveDependency>(deps)

public defstruct UnknownDependencyTypeError <: Exception :
  dep:Dependency

public defmethod print (o:OutputStream, e:UnknownDependencyTypeError):
  print(o, "Unexpected dependency type: %_" % [object-type(dep(e))])

;============================================================
;===================== Terminal Colors ======================
;============================================================

public defn colored-name? (name:String) -> ColoredString :
  ColoredString(name)
    $> bold $> foreground{_, TerminalBrightWhite}
    $> clear-color?
public defn colored-name? (d:Dependency) -> ColoredString :
  colored-name?(name(d))

public defn colored-version? (version:String) -> ColoredString :
  ColoredString(version)
    $> bold $> foreground{_, TerminalBrightGreen}
    $> clear-color?
public defn colored-version? (v:SemanticVersion) -> ColoredString :
  colored-version?(to-string(v))
public defn colored-version? (d:Dependency) -> ColoredString :
  colored-version?(value-or(version-string?(d), ""))
