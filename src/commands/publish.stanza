defpackage slm/commands/publish:
  import core
  import collections
  import arg-parser

  import maybe-utils

  import slm/flags
  import slm/file-utils
  import slm/git-utils
  import slm/logging
  import slm/process-utils
  import slm/toml

defn is-git-repo-dirty? (work-tree: String) -> True|False:
  val proc = ProcessBuilder(["git", "status", "-z"])
    $> with-output
    $> in-dir{_, work-tree}
    $> build
  val status = proc $> get-output $> trim
  wait-process-throw-on-nonzero(proc, "'git status -z' in '%_' failed!" % [work-tree])
  not empty?(status)

defn git-rev-parse (rev: String) -> String:
  git-rev-parse(get-cwd(), rev)

defn git-rev-parse! (rev: String) -> String:
  git-rev-parse!(get-cwd(), rev)

defn git-get-current-branch? () -> Maybe<String>:
  command-output-in-dir(get-cwd(),
    ["git", "symbolic-ref", "--short", "--quiet", "HEAD"])
  $> One
  $> filter{_, {not empty?(_)}}

defn git-get-branch-remote? (branch: String) -> Maybe<String>:
  command-output-in-dir(get-cwd(),
    ["git", "config", "--get", to-string("branch.%_.remote" % [branch])])
  $> One
  $> filter{_, {not empty?(_)}}

public defn publish (cmd-args:CommandArgs) -> False:
  if not has-git?() :
    error("No `git` executable found on the path")

  ; What do we need to do?
  ;
  ; 1. Grab the user's version from their `slm.toml`. If `slm.toml` doesn't
  ;    exist, or it doesn't contain a `version`, fail.
  ;
  ; 2. Check if the repo is dirty. If it is, fail. We don't want users thinking
  ;    they're publishing the latest changes when they're not.
  ;
  ; 3. Check if the version they're on is already tagged remotely. If so, fail.
  ;    We don't want to let a user accidentally overwrite a remote tag.
  ;
  ; 4. Check if the version they're on is already tagged locally. If not, tag
  ;    the version and continue. If so, check that the local tag matches our
  ;    current HEAD, and fail if it doesn't, since we don't want to push the
  ;    wrong tag.

  if not file-exists?(SLM_TOML_NAME) :
    error("can't publish, no configuration file found in current folder")
  val version = parse-slm-toml-file(SLM_TOML_NAME) $> /version

  if is-git-repo-dirty?(get-cwd()):
    error("can't publish with changes, stash or commit them.")

  val current-branch = git-get-current-branch?()
    $> value-or-else{_, {error("not currently on a branch")}}
  debug("on branch '%_'" % [current-branch])

  val current-remote = git-get-branch-remote?(current-branch)
    $> value-or-else{_, {error("no remote currently set for current branch")}}
  debug("using remote '%_'" % [current-remote])

  val version-tag = append("v", version)
  val version-ref = to-string $ "refs/tags/%_" % [version-tag]

  val remote-tags = git-remote-tag-refs(current-remote)
  val remote-tag-rev = get?(remote-tags, version-ref)
  if remote-tag-rev is String:
    error("can't publish %_, already tagged remotely at `%_`"
          % [version-tag, remote-tag-rev])

  val version-tag-rev = git-rev-parse(version-tag)
  if not empty?(version-tag-rev):
    if version-tag-rev != git-rev-parse!("HEAD"):
      error(\<>can't publish %_, already tagged locally at `%_`
Hint: either retag with `git tag --force %_`, or publish a new version.<>
            % [version-tag, version-tag-rev, version-tag])

  ; First try to push the current branch, in case the push fails. That way,
  ; when we push the tag, we can be sure it references a valid commit on a branch
  run-git-command(["push", current-remote, current-branch])

  ; Now that we know it's safe to do so, tag the version and then push it.
  run-git-command(["tag", version-tag])
  run-git-command(["push", current-remote, version-tag])

  false

val PUBLISH-MSG = \<MSG>
The 'publish' command will push and tag your current git branch to
an already established upstream. This command assumes that upstream
remote already has an established branch matching this branch.
<MSG>


public defn setup-publish-cmd () -> Command :
  Command("publish", ZeroArg, false, [], PUBLISH-MSG, publish)
