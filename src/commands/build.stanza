defpackage slm/commands/build:
  import core
  import core/parsed-path
  import collections

  import maybe-utils
  import semver
  import term-colors
  import toml/file
  import toml/parser
  import toml/table
  import toml/value

  import slm/dependency
  import slm/dependencies
  import slm/file-utils
  import slm/lock
  import slm/logging
  import slm/process-utils

public defn ensure-slm-dir-structure-exists () -> False:
  defn create-dir! (path: String) -> True|False:
    if not file-exists?(path):
      create-dir(path)
      true

  if create-dir!(".slm/"):
    create-dir!(".slm/deps/")
    create-dir!(".slm/pkgs/")
  false

defn write-build-stanza-proj (dependencies: Tuple<Dependency>) -> False:
  within f = open(".slm/stanza.proj", false):
    val deps-dir = to-string("%_/.slm/deps/" % [get-cwd()])
    for dep in dependencies do:
      val dep-path = get-cwd() $> parse-path $> relative-to-dir{_, dep $> /path}
      println(f, to-string(\<>include "%_/stanza.proj"<> % [dep-path]))
    println(f, \<>include "../stanza.proj"<>)

defn write-slm-lock-file (dependencies: Tuple<Dependency>) -> False:
  within f = open("slm.lock", false):
    for dep in dependencies do:
      match(dep):
        (dep: GitDependency): 
          println(f, "%_={locator=%~,version=%~,hash=%~}"
                  % [name(dep), locator(dep), to-string(version(dep)), hash(dep)])
        (dep: PathDependency): 
          println(f, "%_={}" % [name(dep)])

public defn build (args0: Tuple<String>) -> False:
  debug("with args '%s'" % [args0])

  ensure-slm-dir-structure-exists()

  val dependencies = slm/dependencies/fetch-and-sync()

  write-build-stanza-proj(dependencies)
  write-slm-lock-file(dependencies)

  val slm-dir = to-string("%_/.slm" % [get-cwd()])

  val args = to-tuple $ cat-all([["stanza", "build"], args0, ["-pkg", "pkgs"]])
  ProcessBuilder(args)
    $> in-dir{_, slm-dir}
    $> build
    $> wait-process-throw-on-nonzero{_, "build failed!"}
    
  false
