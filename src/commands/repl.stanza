defpackage slm/commands/repl:
  import core
  import arg-parser

  import slm/file-utils
  import slm/process-utils
  import slm/logging
  import slm/toml


defn get-repl-args () -> Tuple<String>:
  val ret = get-env("SLM_REPL_ARGS")
  match(ret):
    (x:String): to-tuple $ split(x, " ")
    (x:False): []

public defn repl (cmd-args:CommandArgs) -> False:
  val repl-args = get-repl-args()
  val args = to-tuple $ cat-all([["stanza", "repl"], repl-args, ["-pkg", "pkgs"]])
  val slm-dir = to-string("%_/.slm" % [get-cwd()])

  val vStr = parse-slm-toml("slm.toml") $> /version
  debug("Build Version: %_" % [vStr])
  val env-vars = ["SLM_BUILD_VERSION" => vStr]
  debug("Stanza: %," % [args])

  ProcessBuilder(args)
    $> in-dir{_, slm-dir}
    $> with-env-vars{_, env-vars}
    $> build
    $> run-and-get-exit-code
    $> exit

  false

val REPL-MSG = \<MSG>
The 'repl' command will manage syncing dependencies and then
run the project using the 'stanza repl' process.

The user can pass arguments to the 'stanza repl' process
by using the 'SLM_REPL_ARGS' environment variable.

Example:

$> SLM_REPL_ARGS="-flag TESTING" slm repl

---------------------------
Package Version Propagation
---------------------------

In order for the package's source code to know what its current
version number is, this tool defines 'SLM_BUILD_VERSION' with the
'version' string value from the 'slm.toml' file. This environment
variable is defined for the context of the `stanza repl` process.

This allows the package's stanza code to use '#env-var(SLM_BUILD_VERSION)'
or 'get-env("SLM_BUILD_VERSION")' to access this version string and
compile it into the functions accessed by the repl.

<MSG>

public defn setup-repl-cmd () -> Command :
  Command("repl", ZeroArg, false, [], REPL-MSG, repl)