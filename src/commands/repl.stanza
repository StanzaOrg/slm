defpackage slm/commands/repl:
  import core
  import arg-parser

  import slm/dependencies
  import slm/flags
  import slm/file-utils
  import slm/process-utils
  import slm/logging
  import slm/toml
  import slm/utils
  import slm/stanza-utils
  import slm/platforms

public defn repl (cmd-args:CommandArgs) -> False:

  val cfg = parse-project-toml(SLM_TOML_NAME)

  val stanza-exe = get-stanza-exe(compiler?(cfg))
  val force-build = get?(cmd-args, "force", false)
  val repl-args = get?(cmd-args, "-", [])

  ; This flag indicates to all dependencies that we are building
  ;  in shared library mode to be able to load in the repl.
  set-env("SLM_BUILD_SHARED", "1")

  ; Binary Variable that is used in both build/repl for scripts
  ;   that want to differentiate that way.
  set-env("SLM_BUILD_DYNAMIC_LIB", "True")

  val platform = get-platform()
  set-env("SLM_PLATFORM", platform)

  val dependencies = slm/dependencies/fetch-and-sync(cfg, force-build)

  val args = to-tuple $ cat-all([[stanza-exe, "repl"], repl-args])
  val slm-dir = path-join(get-cwd(), SLM_DIR)
  set-env("SLM_DIR", slm-dir)

  val vStr =  version(cfg)
  debug("Build Version: %_" % [vStr])
  val env-vars = ["SLM_BUILD_VERSION" => vStr]
  debug("Stanza: %," % [args])

  ProcessBuilder(args)
    $> with-env-vars{_, env-vars}
    $> build
    $> run-and-get-exit-code
    $> exit

  false

val REPL-MSG = \<MSG>
The 'repl' command will manage syncing dependencies and then
run the project using the 'stanza repl' process.

The user can pass arguments to the 'stanza repl' process.

Example:

  $> slm repl -- file-to-run.stanza -flags TESTING

---------------------------
Package Version Propagation
---------------------------

In order for the package's source code to know what its current
version number is, this tool defines 'SLM_BUILD_VERSION' with the
'version' string value from the 'slm.toml' file. This environment
variable is defined for the context of the 'stanza repl' process.

This allows the package's stanza code to use '#env-var(SLM_BUILD_VERSION)'
or 'get-env("SLM_BUILD_VERSION")' to access this version string and
compile it into the functions accessed by the repl.

------------------------------
Shared Dependency Construction
------------------------------

With the task dependencies, external programs can be used to build
the artifacts needed to load functionality from a shared C library.
To support this, the 'repl' command defines the environment
variable 'SLM_BUILD_SHARED=1'. This environment variable is intended
to indicate to any of the task dependencies that a shared library
(like a *.so, *.dylib, *.dll) is needed (as opposed to a static library)

Additionally, the 'repl' command defines the environment variable
'SLM_BUILD_DYNAMIC_LIB=True'. This is the same env-var used by the 'build'
command which makes it easier for scripts to just reference one variable.

The 'slm' binary will also define the 'SLM_PLATFORM' environment
variable during the dependendency resolution process. This environment
variable will contain one of the following strings:
  1.  windows
  2.  linux
  3.  os-x

----------------------------
SLM_DIR
----------------------------

This command will define the `SLM_DIR` environment variable and
it will point at the `.slm` directory for the top-level project
being built. This will give subsequent child builds access to
a known directory from which to find other dependencies.

<MSG>

val REPL-CMDLINE-ARGS = \<MSG>
All command line arguments after the 'repl' command passed directly
to the 'stanza repl' instance.
<MSG>

val FORCE-FLAG = \<MSG>
This flag instructs the build system to ignore any stanza
version compatibility checks and attempt to run the repl on this project
regardless.
<MSG>

val REPL-ARGS-FLAG = \<MSG>
To pass additional build arguments directly to the
stanza repl invokation, the user can use the '--'
sequence. All arguments after the '--' will be
passed directly to the repl.
<MSG>


public defn setup-repl-cmd () -> Command :
  val replFlags = [
    Flag("force", ZeroFlag, OptionalFlag, FORCE-FLAG),
    Flag("-", AllRemainingFlag, OptionalFlag, REPL-ARGS-FLAG)
  ]

  Command("repl", ZeroArg, false, replFlags, REPL-MSG, repl)