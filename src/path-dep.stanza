defpackage slm/path-dep:
  import core
  import core/parsed-path

  import semver
  import maybe-utils

  import slm/dependency
  import slm/file-utils
  import slm/string-utils


; Dependencies specified by path (e.g. `foo = { path = "../foo" }`)
public defstruct PathDependency <: RecursiveDependency:
  name: String with: (as-method => true)
  path: String with: (as-method => true)
  version?: Maybe<SemanticVersion> with: ( default => None() )

defmethod version-string? (d:PathDependency) -> Maybe<String>:
  match(version?(d)):
    (x:None): x
    (x:One<SemanticVersion>): One $ to-string(x)

public defn version-string! (d:PathDependency) -> String:
  to-string $ value-or(version?(d), "UNSPECIFIED")

defmethod dependency-type-name (d:PathDependency) -> String :
  "path"

defmethod print (o:OutputStream, d:PathDependency) :
  print(o, "%_ = { path = \"%_\"" % [name(d), path(d)])
  match(version?(d)):
    (x:None): print(o, " }")
    (x:One<SemanticVersion>): print(o, ", version = \"%_\" }" % [to-string $ value(x)])


public defn parse-path-dependency (name:String, path:String,
                                   version?:Maybe<String>,
                                   toml-dir:String, env-sub-enable:True|False)
                                   -> PathDependency:
  val path* = let :
    val sub-path = env-var-substitute(path) when env-sub-enable else path
    val parsed-path = parse-path(sub-path)
    val abs-path = parsed-path when absolute?(parsed-path) else
      relative-to-dir(parse-path(toml-dir), parsed-path)
    un-norm-path(to-string(abs-path))

  val version = match(version?):
    (x:None): x
    (x:One<String>):
      val sver = parse-semver(value(x)) $> expect{_, "SemanticVersion: couldn't parse  '%_'" % [x]}
      One(sver)
  PathDependency(name, path*, version)
