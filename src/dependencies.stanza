defpackage slm/dependencies:
  import core
  import core/parsed-path
  import collections

  import maybe-utils
  import semver
  import term-colors
  import toml

  import slm/errors
  import slm/flags
  import slm/dep-types
  import slm/file-utils
  import slm/git-utils
  import slm/stanza-utils
  import slm/logging
  import slm/toml
  import slm/utils

public defn fetch-and-sync (cfg:SlmToml, force:True|False) -> Tuple<Dependency>:

  debug("fetch-and-sync: calling ensure-slm-dir-structure-exists")
  ensure-slm-dir-structure-exists()

  debug("fetch-and-sync: calling resolve-deps")
  val deps = resolve-deps(cfg)

  debug("fetch-and-sync: calling check-stanza-compatible-deps")
  check-stanza-compatible-deps(cfg, deps, force)

  debug("fetch-and-sync: returning deps")
  deps

defn resolve-deps (cfg:SlmToml) -> Tuple<Dependency> :
  debug("resolve-deps: calling parse-slm-toml-and-resolve-dependencies")
  val deps = parse-slm-toml-and-resolve-dependencies(cfg)

  ; We only write this
  within f = open(SLM_STANZA_PROJ, false):
    debug("resolve-deps: calling write-build-stanza-proj")
    write-build-stanza-proj(f, deps)

  debug("resolve-deps: returning deps")
  deps

defn check-stanza-compatible-deps (cfg:SlmToml, deps:Tuple<Dependency>, force:True|False) :
  val non-compat = check-stanza-versions(cfg, deps)
  if length(non-compat) > 0:
    if force:
      info("Stanza Compatibility Check Failed - Proceeding by Force")
    else:
      val name-version = for [name, msg] in pairs(non-compat) seq:
        "'%_' %_" % [name, msg]
      val content = string-join(name-version, "\n")
      info("Current Stanza Version: %_" % [get-stanza-version!()])
      info("Dependencies with Stanza Version Issues:")
      info(content)
      error("Stanza Version Compatibility Check Failed")

defn ensure-slm-dir-structure-exists () -> False:
  defn create-dir! (path: String) -> True|False:
    if not file-exists?(path):
      create-dir(path)
      true

  if create-dir!(SLM_DIR):
    for build-dir in SLM_BUILD_DIRS do:
      create-dir!(build-dir)
  false

public-when(TESTING) defn write-build-stanza-proj (f:OutputStream, dependencies: Tuple<Dependency>) -> False:
  debug("write-build-stanza-proj(\"%_\", \"%_\")" % [f, dependencies])
  val deps* = recursive-deps-only(dependencies)  ; everything except TaskDeps
  for dep in deps* do:
    label<False> continue:
      debug("write-build-stanza-proj for dep \"%_\"" % [dep])
      val dep-path = path-join(path(dep), "stanza.proj")
      val stanza-proj? = resolve-path(dep-path)
      val dep-stanza-proj = un-norm-path $ match(stanza-proj?):
        (x:False):
          ; pkg dependencies may or may not have a stanza.proj
          match(dep):
            (pkgdep:PkgDependency):
              if not file-exists?(dep-path): 
                debug("stanza.proj doesn't exist for pkg \"%_\", skipping dep-path = \"%_\"" % [name(dep), dep-path])
                continue(false)
            (d): false
          throw $ Exception("Failed to Resolve Path %_. Double check path dependencies and confirm expected git repos in '.slm/deps'" % [dep-path])
        (x:String): x
      debug("write-build-stanza-proj: adding \"%_\" to stanza.proj at \"%_\"" % [dep-stanza-proj, f])
      println(f, to-string("include \"%_\"" % [dep-stanza-proj]))

;Internal struct used by dependency resolution to track the current resolution
;status of dependencies
defstruct DependencyFrame :
  dependency:RecursiveDependency
  parent-name:String
  ;Used to "cancel" earlier queued requests to process this dependency
  most-recent-ticket-number:Int

defn parse-slm-toml-and-resolve-dependencies (project-config:SlmToml) -> Tuple<Dependency> :
  ;Current resolution state of each recursive dependency, keyed by dependency name
  val res-table = HashTable<String,DependencyFrame>()

  ;Non-recursive dependencies
  val non-res-deps = Vector<Dependency>()

  ;Table of path dependency configs
  val path-configs = HashTable<String,Maybe<SlmToml>>()

  ;Ticket ID number generator
  val ticket-number-seq = to-seq(0 to false)

  ;Queue of dependencies to process
  ;[dependency name, ticket ID number]
  val ticket-queue = Queue<[String,Int]>()

  ;Queue a dependency for resolution
  defn queue-ticket (dep:RecursiveDependency, parent-name:String) -> False :
    val tick-num = next(ticket-number-seq)
    res-table[name(dep)] = DependencyFrame(dep, parent-name, tick-num)
    add(ticket-queue, [name(dep), tick-num])

  ;For a new recursive child dependency:
  ;- Check if it is compatible with the previously resolved version if a
  ;  dependency with the same name was previously resolved
  ;- Queue the dependency for processing (or re-processing) if necessary
  ;  * Reprocessing may occur if, for example, a dependency is first requested
  ;    as a git dependency by one parent, but is then requested as a path
  ;    dependency by a second parent (the path dependency takes precedence)
  defn queue-child-dep (child:RecursiveDependency, parent-name:String) -> False :
    match(get?(res-table, name(child))) :
      (frame:DependencyFrame) :
        ;Already resolved before
        val old-dep = dependency(frame)
        val old-parent = /parent-name(frame)
        val re-process? = compatible-dep?(child, parent-name, old-dep, old-parent)
        if re-process? :
          queue-ticket(child, parent-name)
      (_) :
        ;Never been resolved before
        queue-ticket(child, parent-name)

  ;Process the children of a dependency:
  ;- Execute task dependencies
  ;- Queue recursive children for processing
  defn process-children (parent-config:SlmToml, parent-name:String,
                         parent-dir:String) -> False :
    for child in values(dependencies(parent-config)) do :
      match(child) :
        (child:RecursiveDependency) :
          queue-child-dep(child, parent-name)
        (child:TaskDependency) :
          add(non-res-deps, child)
          run-task-dep(child, parent-name, parent-dir)
        (_) :
          error("unexpected dependency type: %_" % [object-type(child)])

  ;Process a ticket given its dependency frame
  defn process-ticket (frame:DependencyFrame) -> False :
    debug("processing dependency %_" % [name(dependency(frame))])
    match(dependency(frame)) :
      (dep:GitDependency) :
        val config = resolve-git-dependency(dep)
        match(config:SlmToml) :
          process-children(config, name(dep), path(dep))

      (dep:PathDependency) :
        val [config, is-new?] = match(get?(path-configs, name(dep))) :
          (config:Maybe<SlmToml>) :
            [config, false]
          (_) :
            val toml-path = path-join(path(dep), SLM_TOML_NAME)
            if file-exists?(toml-path) :
              [One(parse-slm-toml-file(toml-path)), true]
            else :
              warn("no configuration file found for path dependency %_ at %_"
                % [name(dep), path(dep)])
              [None(), true]

        check-path-compatible(dep, parent-name(frame), config)

        if is-new? :
          path-configs[name(dep)] = config
          match(config:One<SlmToml>) :
            process-children(value(config), name(dep), path(dep))

      (dep:PkgDependency) :
        fetch-dependency-pkgver(dep)
        val toml-path = path-join(path(dep), SLM_TOML_NAME)
        if file-exists?(toml-path) :
          val config = parse-slm-toml-file(toml-path)
          process-children(config, name(dep), path(dep))
        else :
          warn("no configuration file found for package dependency %_ at %_"
            % [name(dep), path(dep)])

  ;Process a ticket if it has not been pre-empted
  defn process-ticket? (ticket:[String,Int]) -> False :
    val [name, tick-num] = ticket
    val frame = match(get?(res-table, name)) :
      (frame:DependencyFrame) : frame
      (_) :
        error("dependency resolution algorithm failure: missing frame for \
          dependency %_" % [name])
    val frame-tick-num = most-recent-ticket-number(frame)
    if frame-tick-num == tick-num :
      process-ticket(frame)
    else :
      debug("skipping ticket %_ for %_: pre-empted by ticket %_" % [tick-num,
        name, frame-tick-num])

  ;Execute
  debug("traversing dependency tree to resolve dependencies")
  process-children(project-config, name(project-config), get-cwd())
  while not empty?(ticket-queue) :
    process-ticket?(pop(ticket-queue))
  debug("done resolving dependencies")

  to-tuple $ cat{_, non-res-deps} $ for frame in values(res-table) seq :
    val dep = dependency(frame)
    val parent-name = /parent-name(frame)
    match(dep) :
      (dep:GitDependency) :
        debug("resolved %_ to %_ (parent %_)" % [colored-name?(dep),
          colored-version?(dep), parent-name])
        debug("computing hash for %_ at %_" % [colored-name?(dep), path(dep)])
        val hash = git-or-libgit-rev-parse!(path(dep), "HEAD")
        sub-hash(dep, hash)
      (dep:PathDependency):
        debug("resolved %_ to %_ (parent %_)" % [colored-name?(dep), path(dep),
          parent-name])
        dep
      (dep:PkgDependency) :
        debug("resolved %_ to %_ (parent %_)" % [colored-name?(dep),
          colored-version?(dep), parent-name])
        dep
      (_) :
        error("unexpected dependency type: %_" % [object-type(dep)])

;Fetch or sync the git dependency
;Returns the dependency's parsed config for convenience if it exists and is
;up-to-date
defn resolve-git-dependency (dep:GitDependency) -> SlmToml|False :
  val dep-dir = path(dep)
  val toml-path = path-join(dep-dir, SLM_TOML_NAME)
  val cfg? = if file-exists?(toml-path) :
    val cfg = parse-slm-toml-file(toml-path)
    match(parse-semver(version(cfg))) :
      (ver:One<SemanticVersion>) :
        val existing-ver = value(ver)
        if existing-ver == version(dep) :
          ;Existing copy's version already matches
          ;Return config to avoid unnecessary re-parsing of the toml file
          cfg
        else if existing-ver > version(dep) and
                compatible?(existing-ver, version(dep)) :
          info("using existing newer version %_ for %_ which is compatible \
            with older requested version %_, to use version %_ please run \
            'slm clean' first" % [existing-ver, name(dep), version(dep),
            version(dep)])
          cfg
        else :
          ;Re-sync
          sync-dependency-to-version(dep)
          ;Old config is outdated now -- new config will be parsed later
          false
      (_) :
        ;Can't parse version of existing copy, assume it is not compatible
        sync-dependency-to-version(dep)
        false
  else if file-exists?(dep-dir) :
    ;Folder is missing config file, assume dependency is out-of-date
    sync-dependency-to-version(dep)
    false
  else :
    fetch-dependency-at-version(dep)
    false

  ;Return already-parsed config if available, otherwise (re-)parse config from file
  match(cfg?) :
    (cfg:SlmToml) : cfg
    (_) :
      if file-exists?(toml-path) :
        parse-slm-toml-file(toml-path)
      else :
        warn("could not find configuration file for git dependency %_ at %_" %
          [name(dep), toml-path])
        false

doc: \<DOC>
Check if the expected version requested by the path dependency is satisfied by
the observed config
@throws Error if expected version does not match observed version
<DOC>
defn check-path-compatible (dep:PathDependency, parent-name:String,
                            config:Maybe<SlmToml>) -> False :
  val obs = match(config:One<SlmToml>) : parse-semver(version(value(config)))
    else: None()
  match(version?(dep), obs) :
    (exp:One<SemanticVersion>, obs:One<SemanticVersion>) :
      if not compatible?(value(exp), value(obs)) :
        val msg = "path dependency %_ at %_ has version %_, which is \
          incompatible with version %_ requested by %_" % [name(dep), path(dep),
          value(obs), version-string!(dep), parent-name]
        error(msg, code = 240)
    (exp:One<SemanticVersion>, obs:None) :
      val msg = match(config:One<SlmToml>) :
        "path dependency %_ at %_ has non-semantic version %_, which is \
          incompatible with version %_ requested by %_" % [name(dep), path(dep),
          version(value(config)), version-string!(dep), parent-name]
      else :
        "path dependency %_ at %_ has no configuration file, but version %_ \
          was requested by %_" % [name(dep), path(dep), version-string!(dep),
          parent-name]
      error(msg, code = 240)
    (exp:None, obs) :
      false
  false

doc: \<DOC>
Checks if a requested dependency is compatible with the previously resolved
dependency of the same name. Returns true if the new request is 'stronger' and
the dependency needs to be re-processed.

@param dep Requested dependency
@param parent Name of `dep`'s parent dependency
@param resolved-dep Previously resolved dependency of the same name
@param resolved-parent Name of `resolved-dep`'s parent dependency
@returns true if `dep` should become the new resolved dependency, false otherwise
@throws Error if requested and resolved dependencies are incompatible
<DOC>
defmulti compatible-dep? (dep:RecursiveDependency, parent:String,
  resolved-dep:RecursiveDependency, resolved-parent:String) -> True|False

;Default to incompatibility error for mismatched dependency types
defmethod compatible-dep? (dep:RecursiveDependency, parent:String,
                           resolved-dep:RecursiveDependency,
                           resolved-parent:String) -> True|False :
  error("incompatible dependency types requested for %_:\n  \
    %_ requested it as a %_ dependency\n  %_ requested it as a %_ dependency"
    % [colored-name?(dep), colored-name?(parent), dependency-type-name(dep),
    colored-name?(resolved-parent), dependency-type-name(resolved-dep)])

;Git dependency compatibility
defmethod compatible-dep? (dep:GitDependency, parent:String,
                           resolved-dep:GitDependency, resolved-parent:String)
                           -> True|False :
  val requested-version = version(dep)
  val resolved-version = version(resolved-dep)
  if not compatible?(requested-version, resolved-version) :
    error("incompatible versions requested for git dependency %_:\n  \
      %_ => %_\n  %_ => %_" % [colored-name?(dep), colored-name?(parent),
      colored-version?(dep), colored-name?(resolved-parent),
      colored-version?(resolved-dep)])
  ;Reprocess if requested version is newer
  requested-version > resolved-version

;Path dependency compatibility
defmethod compatible-dep? (dep:PathDependency, parent:String,
                           resolved-dep:PathDependency, resolved-parent:String)
                           -> True|False :
  if path(dep) != path(resolved-dep) :
    error("different paths specified for path dependency %_:\n  \
      %_ => %_\n  %_ => %_" % [colored-name?(dep), colored-name?(parent),
      path(dep), colored-name?(resolved-parent), path(resolved-dep)])
  match(version?(dep), version?(resolved-dep)) :
    (v1:One<SemanticVersion>, v2:One<SemanticVersion>) :
      if not compatible?(value(v1), value(v2)) :
        error("incompatible versions requested for path dependency %_:\n  \
          %_ => %_\n  %_ => %_" % [colored-name?(dep), colored-name?(parent),
          colored-version?(dep), colored-name?(resolved-parent),
          colored-version?(resolved-dep)])
      ;No need to re-process dependency, the contents at the path are guaranteed
      ;to be compatible with `dep` by transitivity with `resolved-dep`
      false
    (v1:One<SemanticVersion>, v2:None) :
      ;Need to trigger re-processing of this path dependency to check version
      ;compatibility between `dep`'s requested version and the contents at the
      ;path
      true
    (v1:None, v2) :
      false

;Package dependency compatibility
;TODO: implement package dependency version compatibility checking
defmethod compatible-dep? (dep:PkgDependency, parent:String,
                           resolved-dep:PkgDependency, resolved-parent:String)
                           -> True|False :
  if version(dep) != version(resolved-dep) :
    error("incompatible versions requested for package dependency %_:\n  \
      %_ => %_\n  %_ => %_" % [colored-name?(dep), parent,
      colored-version?(dep), resolved-parent, colored-version?(resolved-dep)])
  false

;Path dependency precedence over other dependency types
defmethod compatible-dep? (dep:PathDependency, parent:String,
                           resolved-dep:GitDependency,
                           resolved-parent:String) -> True|False :
  warn("using path dependency at %_ to satisfy git dependency %_ requested \
    by %_, skipping compatibility check" % [path(dep), name(resolved-dep),
    resolved-parent])
  true
defmethod compatible-dep? (dep:GitDependency, parent:String,
                           resolved-dep:PathDependency, resolved-parent:String)
                           -> True|False :
  warn("using path dependency at %_ to satisfy git dependency %_ requested \
    by %_, skipping compatibility check" % [path(resolved-dep), name(dep),
    parent])
  false
defmethod compatible-dep? (dep:PathDependency, parent:String,
                           resolved-dep:PkgDependency,
                           resolved-parent:String) -> True|False :
  warn("using path dependency at %_ to satisfy package dependency %_ \
    requested by %_, skipping compatibility check" % [path(dep),
    name(resolved-dep), resolved-parent])
  true
defmethod compatible-dep? (dep:PkgDependency, parent:String,
                           resolved-dep:PathDependency, resolved-parent:String)
                           -> True|False :
  warn("using path dependency at %_ to satisfy package dependency %_ \
    requested by %_, skipping compatibility check" % [path(resolved-dep),
    name(dep), parent])
  false

;============================================================
;======================== Utilities =========================
;============================================================

;Compare two maybe versions:
;- One<Version> is greater than None
;- Higher semantic version is greater
defmethod compare (v1:Maybe<SemanticVersion>, v2:Maybe<SemanticVersion>) -> Int :
  match(v1, v2) :
    (v1:One<SemanticVersion>, v2:One<SemanticVersion>) :
      compare(value(v1), value(v2))
    (v1:One<SemanticVersion>, v2:None) :
      1
    (v1:None, v2:One<SemanticVersion>) :
      -1
    (v1:None, v2:None) :
      0
