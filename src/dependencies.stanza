defpackage slm/dependencies:
  import core
  import collections

  import maybe-utils
  import semver
  import term-colors
  import toml

  import slm/errors
  import slm/flags
  import slm/dep-types
  import slm/file-utils
  import slm/git-utils
  import slm/stanza-utils
  import slm/lock
  import slm/logging
  import slm/toml
  import slm/utils

public defn fetch-and-sync (cfg:SlmToml, force:True|False) -> Tuple<Dependency>:

  debug("fetch-and-sync: calling ensure-slm-dir-structure-exists")
  ensure-slm-dir-structure-exists()

  debug("fetch-and-sync: calling resolve-deps")
  val deps = resolve-deps(cfg)

  debug("fetch-and-sync: calling check-stanza-compatible-deps")
  check-stanza-compatible-deps(cfg, deps, force)

  debug("fetch-and-sync: returning deps")
  deps

defn resolve-deps (cfg:SlmToml) -> Tuple<Dependency> :
  ; There are two main strategies we'll use
  ; 1. If there's a slm.lock, then we resolve all dependencies to that exact hash
  ;    using only the lockfile.
  ;
  ; 2. Otherwise we use the slm.toml
  if file-exists?(SLM_LOCK_NAME):
    val lock-cfg = within f = open(SLM_LOCK_NAME):
      debug("resolve-deps: calling parse-slm-lock-file")
      parse-slm-lock-file(f)
    debug("resolve-deps: calling parse-slm-lock-and-resolve-dependencies")
    parse-slm-lock-and-resolve-dependencies(cfg, lock-cfg)
  else:
    debug("resolve-deps: calling parse-slm-toml-and-resolve-dependencies")
    val deps = parse-slm-toml-and-resolve-dependencies(cfg)

    ; We only write this
    within f = open(SLM_STANZA_PROJ, false):
      debug("resolve-deps: calling write-build-stanza-proj")
      write-build-stanza-proj(f, deps)

    within f = open(SLM_LOCK_NAME, false):
      debug("resolve-deps: calling write-slm-lock-file")
      write-slm-lock-file(f, deps)

    debug("resolve-deps: returning deps")
    deps

defn check-stanza-compatible-deps (cfg:SlmToml, deps:Tuple<Dependency>, force:True|False) :
  val non-compat = check-stanza-versions(cfg, deps)
  if length(non-compat) > 0:
    if force:
      info("Stanza Compatibility Check Failed - Proceeding by Force")
    else:
      val name-version = for [name, msg] in pairs(non-compat) seq:
        "'%_' %_" % [name, msg]
      val content = string-join(name-version, "\n")
      info("Current Stanza Version: %_" % [get-stanza-version!()])
      info("Dependencies with Stanza Version Issues:")
      info(content)
      error("Stanza Version Compatibility Check Failed")

defn ensure-slm-dir-structure-exists () -> False:
  defn create-dir! (path: String) -> True|False:
    if not file-exists?(path):
      create-dir(path)
      true

  if create-dir!(SLM_DIR):
    for build-dir in SLM_BUILD_DIRS do:
      create-dir!(build-dir)
  false

public-when(TESTING) defn write-build-stanza-proj (f:OutputStream, dependencies: Tuple<Dependency>) -> False:
  label<False> return:
    val deps* = recursive-deps-only(dependencies)
    for dep in deps* do:
      val dep-path = path-join(path(dep), "stanza.proj")
      val stanza-proj? = resolve-path(dep-path)
      val dep-stanza-proj = un-norm-path $ match(stanza-proj?):
        (x:False):
          ; pkg dependencies may or may not have a stanza.proj
          match(dep):
            (pkgdep:PkgDependency):
              if not file-exists?(dep-path): 
                debug("stanza.proj doesn't exist for pkg \"%_\", skipping dep-path = \"%_\"" % [name(dep), dep-path])
                return(false)
            (d): false
          throw $ Exception("Failed to Resolve Path %_. Double check path dependencies and confirm expected git repos in '.slm/deps'" % [dep-path])
        (x:String): x
      println(f, to-string(\<>include "%_"<> % [dep-stanza-proj]))


defn parse-slm-lock-and-resolve-dependencies (cfg:SlmToml, lock-cfg:Tuple<LockedDependency>):
  val slm-toml-dependencies = dependencies(cfg)
  val locked-dependencies = to-hashtable<String, Dependency> $
    for locked-dep in lock-cfg seq:
      name(locked-dep) => match(locked-dep):
        (dep: LockedGitDependency):
          val git-dep = GitDependency(name(dep), locator(dep), version(dep), hash(dep))
          val slm-toml-dep? = get?(slm-toml-dependencies, name(dep))
          match(slm-toml-dep?):
            (slm-toml-dep:GitDependency):
              if not compatible?(version(slm-toml-dep), version(git-dep)):
                error("'%_' (version %_) specified in 'slm.toml'.\n\
                       This conflicts with locked version ('%_') from 'slm.lock'\n\
                       If you wish to use the version from your 'slm.toml', \
                       run 'slm clean', then re-run this command."
                       % [name(dep), version(slm-toml-dep), version(git-dep)])
              else:
                fetch-or-sync-at-hash(git-dep)
                git-dep
            (slm-toml-dep:PathDependency):
              error("'%_' is specified as a path dependency in 'slm.toml'.\n\
                    This conflicts with locked version ('%_') from 'slm.lock'\n\
                    If you wish to use the version from your 'slm.toml', \
                    run 'slm clean', then re-run this command."
                    % [name(slm-toml-dep), version(dep)])
            (slm-toml-dep:TaskDependency):
              ; To re-run, the user needs to run `slm clean` and then `slm build`
              ;  again
              error("'%_' is specified as a task dependency in 'slm.toml'.\n\
                    This conflicts with the locked version ('%_') from 'slm.lock'\n\
                    If you wish to use the version from your 'slm.toml', \
                    run 'slm clean', then re-run this command." % [name(slm-toml-dep), version(dep)]
                    )
            (x:False):
              ; This dependency was found in the lock file but not in our slm.toml file.
              ;  This likely means it is a "grand-child" or further decendent
              ;  dependency. We just want to let it ride
              ; TODO - It may also be a removed dependency. There is no way for me to
              ;  distinguish between the two
              git-dep
        (dep: LockedPkgDependency):
          val pkg-dep = PkgDependency(name(dep), version(dep), type(dep), options = options(dep))
          val slm-toml-dep? = get?(slm-toml-dependencies, name(dep))
          match(slm-toml-dep?):
            (slm-toml-dep:PkgDependency):
              if version(slm-toml-dep) != version(pkg-dep):
                error("'%_' (version %_) specified in 'slm.toml'.\n\
                       This conflicts with locked version ('%_') from 'slm.lock'\n\
                       If you wish to use the version from your 'slm.toml', \
                       run 'slm clean', then re-run this command."
                       % [name(dep), version(slm-toml-dep), version(pkg-dep)])
              else:
                fetch-or-sync-pkgver(pkg-dep)
                pkg-dep
            (g-or-p:GitDependency|PathDependency):
              error("'%_' is specified as a git/path dependency in 'slm.toml'.\n\
                    This conflicts with locked version ('%_') from 'slm.lock'\n\
                    If you wish to use the version from your 'slm.toml', \
                    run 'slm clean', then re-run this command."
                    % [name(g-or-p), version(dep)])
            (slm-toml-dep:TaskDependency):
              ; To re-run, the user needs to run `slm clean` and then `slm build`
              ;  again
              error("'%_' is specified as a task dependency in 'slm.toml'.\n\
                    This conflicts with the locked version ('%_') from 'slm.lock'\n\
                    If you wish to use the version from your 'slm.toml', \
                    run 'slm clean', then re-run this command." % [name(slm-toml-dep), version(dep)]
                    )
            (x:False):
              ; This dependency was found in the lock file but not in our slm.toml file.
              ;  This likely means it is a "grand-child" or further decendent
              ;  dependency. We just want to let it ride
              ; TODO - It may also be a removed dependency. There is no way for me to
              ;  distinguish between the two
              pkg-dep
        (dep: LockedPathDependency):
          val slm-toml-dep = get?(slm-toml-dependencies, name(dep))
          match(slm-toml-dep):
            (g-or-t:GitDependency|TaskDependency):
              error("'%_' is specified as a git/task dependency in 'slm.toml'.\n\
                    This conflicts with locked (path) version from 'slm.lock'\n\
                    If you wish to use the version from your 'slm.toml', \
                    run 'slm clean', then re-run this command."
                    % [name(dep)])
            (path-dep:PathDependency):
              val [is-compat, obs-version] = check-path-compatible(path-dep)
              if not is-compat:
                error-incompatible-path-version(path-dep, obs-version)
              path-dep
            (x:False):
              ; This dependency was found in the lock file but was not found
              ;  in our slm.toml file. This likely means it is a "grand-child"
              ;  or further descendent dependency. This isn't a common case - but
              ;  might happen during development.
              ; TODO Current Code Structure makes it impossible to handle this case
              error("'%_' is found in the 'slm.lock' file but not in 'slm.toml'. \
                    It is likely a grandchild dependency that is included as a path.\
                    We don't currently handle this case. Consider adding the\
                    necessary path dependency to the local project's 'slm.toml'\
                    to work around this short-coming." % [name(dep)])
        (dep: LockedTaskDependency):
          val slm-toml-dep = get?(slm-toml-dependencies, name(dep))
          match(slm-toml-dep):
            (g-or-p:GitDependency|PathDependency):
              error("'%_' is specified as a git/path dependency in 'slm.toml'.\n\
                    This conflicts with the locked (task) version from 'slm.lock'\n\
                    If you wish to use the version from 'slm.toml', run 'slm clean',\n\
                    then re-run this command." % [name(dep)])
            (task-dep:TaskDependency):
              ; In order not to confuse things, I'm not going to re-run the task here
              ;  even if it is different
              ;  we should probably indicate a warning though - as that might give the
              ;  user the leeway to run 'slm clean' and re-run the tasks.
              ;  Everything should be idempotent
              task-dep
            (x:False):
              ; This dependency was found in the lock file, but was not found
              ;  in our slm.toml file. This likely means it is a "grand-child"
              ;  or further descendent dependency.
              error("This error doesn't make sense")

  for [name, dep] in pairs(slm-toml-dependencies) do:
    if get?(locked-dependencies, name) is False:
      error("'%_' (version '%_') specified in 'slm.toml' not found in 'slm.lock'.\n\
             If you wish to add a dependency to your 'slm.toml', \
             run 'slm clean', then re-run this command."
             % [name, version-string?(dep) $> value-or{_, path(dep)}])

  ; TODO warn user if `slm.toml` is newer than `slm.lock` so we can catch
  ; any more inconsistencies that we don't yet detect (e.g. removing a dependency)

  to-tuple $ values $ locked-dependencies


doc: \<DOC>
Check if the version located at the desired path is compatible.

Path Dependencies have an optional version that we can use to
check the specified path. We're looking for compatibility
with a particular version to head off issues where the API
doesn't work.

@return [Compatible?, Observed-Version]
Compatable? - True if the versions are compatible or their is no
expected version. False otherwise.
Observed-Version - String indicating the version found in the
<DOC>
defn check-path-compatible (d:PathDependency) -> [True|False, String] :
  val dep-path = path(d)
  val cfg-path = path-join(dep-path, SLM_TOML_NAME)
  val cfg = parse-slm-toml(cfg-path, env-sub-enable = false)
  val obs-version-str = version(cfg)
  val obs-version? = parse-semver(obs-version-str)
  val is-compat = match(obs-version?, version?(d)):
    (obs:One<SemanticVersion>, exp:One<SemanticVersion>):
      compatible?(value!(obs), value!(exp))
    (obs, exp:None): true
  [is-compat, obs-version-str]

defn parse-slm-toml-and-resolve-dependencies (cfg:SlmToml) -> Tuple<Dependency>:
  val resolved-dependencies = HashTable<String, Dependency>()

  let loop (slm-toml:SlmToml = cfg, dep-path:String = get-cwd(), top-level: True|False = true):
    val parent-name = slm-toml $> name
    val resolved = to-tuple $ for dep in values(dependencies(slm-toml)) seq?:
      match(dep):
        (dep: GitDependency):
          resolve-git-dependency?(dep, parent-name, resolved-dependencies)
        (dep: PathDependency):
          if top-level:
            resolve-path-dependency?(dep, resolved-dependencies)
          else:
            error("found path dependency '%_' in dependency '%_'.\n\
                   You can't have path dependencies in dependencies \
                   (path dependencies can only be specified in a top-level slm.toml)"
                   % [/name(dep), parent-name])
        (dep: PkgDependency):
          fetch-or-sync-pkgver(dep, parent-name, dep-path)
        (dep: TaskDependency):
          run-task-dep(dep, parent-name, dep-path)
        (_): fatal("parse-slm-toml-and-resolve-dependencies: unexpected dependency type: %_" % [dep])

    debug("done resolving '%_'" % [parent-name])

    for dep in resolved do:
      match(dep: GitDependency):
        debug("resolved %_ at %_" % [colored-name?(dep), version-string(dep)])
      resolved-dependencies[/name(dep)] = dep

    val resolved* = recursive-deps-only(resolved)
    for dep in resolved* do:
      val next-slm-toml = path-join(path(dep), SLM_TOML_NAME)
      if not file-exists?(next-slm-toml):
        debug("skipping '%_': does not exist" % [next-slm-toml])
      else:
        debug("parsing '%_'" % [next-slm-toml])
        val [dep-path, _] = split-filepath(next-slm-toml)
        debug("dep-path: %_" % [dep-path])
        val next-cfg = within f = open(next-slm-toml):
          parse-slm-toml(f)
        loop(next-cfg, dep-path, false)

  debug("done parsing dependency graph")
  for dep in values(resolved-dependencies) do:
    match(dep: GitDependency):
      debug("resolved %_ at %_" % [colored-name?(dep), to-string(version(dep))])

  to-tuple $ values $ resolved-dependencies

defn resolve-git-dependency? (
  dep: GitDependency,
  parent-name: String,
  resolved-dependencies: HashTable<String, Dependency>,
):
  label<Maybe<GitDependency>> return:
    val requested-version = version(dep)
    debug("trying to resolve %_ at %_" % [colored-name?(dep), requested-version])

    ; Get the resolved version of this dependency, checking first to see
    ; if it has previously been resolved.
    match(get?(resolved-dependencies, name(dep))):
      ; If not, we just use the requested version.
      (_: False):
        debug("using requested version: %_" % [requested-version])
      ; If we have, we need to:
      ;   1. Check if the requested version is incompatible.
      ;   2. Check if the already-resolved version is the same, or newer.
      (resolved-dependency: GitDependency):
        val resolved-version = version(resolved-dependency)
        if not compatible?(requested-version, resolved-version):
          error("can't resolve dependencies: incompatible versions of %_\n\
                 resolved:  %~\n\
                 requested: %~"
                 % [colored-name?(dep), resolved-version, requested-version])
        else if resolved-version >= requested-version:
          debug("re-using previously resolved version %_ (>= %_) "
                % [resolved-version, requested-version])
          return(None())
        else:
          debug("using %_ > %_" % [requested-version, resolved-version])
      (_: PathDependency):
        error("resolving '%_' to '%_' (dependency of '%_'):\n\
              %_ was specified as a path dependency at top-level.\n\
              Currently slm cannot support mixed path and git dependencies."
              % [colored-name?(dep), requested-version, parent-name,
                 colored-name?(dep)])

    val dep-dir = path(dep)
    if file-exists?(dep-dir):
      sync-dependency-to-version(dep)
    else:
      fetch-dependency-at-version(dep)

    debug("computing hash for '%_' at '%_'" % [name(dep), path(dep)])
    val hash = git-rev-parse!(path(dep), "HEAD")
    One(dep $> sub-hash{_, hash})

defn error-incompatible-path-version (dep:PathDependency, obs-version:String):
  val msg = "The Path Dependency for '%_', found in '%_', has an incompatible version. \
        The 'slm.toml' file expects version '%_'. The version found at that path is \
        '%_'." % [name(dep), path(dep), version-string!(dep), obs-version]
  error(msg, code = 240)


defn resolve-path-dependency? (
  dep: PathDependency,
  resolved-dependencies: HashTable<String, Dependency>,
) -> One<PathDependency>:
  if get?(resolved-dependencies, name(dep)) is-not False:
    ; This scenario shouldn't occur, because we parse all top-level dependencies
    ; first, and we only allow path dependencies at the top-level, hence path dependencies get
    ; resolved first.
    ; could occur is if
    fatal("internal inconsistency resolving path dependency '%_'" % [name(dep)])

  val [is-compat, obs-version] = check-path-compatible(dep)
  if not is-compat:
    error-incompatible-path-version(dep, obs-version)

  One(dep)
