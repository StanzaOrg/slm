defpackage slm/utils:
  import core
  import core/parsed-path
  import collections

  import maybe-utils
  import term-colors

  import slm/file-utils

public defn get-stanza-exe () -> String :
  val ret = get-env("SLM_STANZA")
  match(ret):
    (x:String): trim(x)
    (_:False): "stanza"

public defn clear-color? (c: ColoredString) -> ColoredString:
  if not supports-color?():
    c $> clear
  else:
    c

public defn supports-color? () -> True|False:
  switch(get-env("SLM_COLOR")):
    "always": true
    "never": false
    else:
      ; TODO should check if output is to a TTY instead of assuming
      true

public defn pairs<?K, ?V> (s: Seqable<KeyValue<?K, ?V>>) -> Seq<[K, V]>:
  s $> to-seq $> seq{fn (kv): [key(kv), value(kv)], _}

public defn nth?<?T> (c: IndexedCollection<?T>, n: Int) -> Maybe<T>:
  if n < length(c):
    One(get(c, n))
  else:
    None()

public defn last?<?T> (c: Seqable<?T>) -> Maybe<T>:
  let loop (s = to-seq(c), last = None()):
    if empty?(s):
      last
    else:
      loop(s, One(next(s)))

public defn first<?T> (t: Tuple<?T>) -> T:
  t[1]

public defn full-url-from-locator (locator: String) -> String:
  defn git-locator (locator: String): (to-string("git@github.com:%_" % [locator]))
  defn https-locator (locator: String): (to-string("https://github.com/%_" % [locator]))

  switch(get-env("SLM_PROTOCOL")):
    "git": git-locator(locator)
    "https": https-locator(locator)
    else: git-locator(locator)
