defpackage slm/utils:
  import core
  import core/parsed-path
  import collections

  import maybe-utils
  import term-colors

  import slm/errors
  import slm/file-utils
  import slm/git-utils


public defn clear-color? (c: ColoredString) -> ColoredString:
  if not supports-color?():
    c $> clear
  else:
    c

public defn supports-color? () -> True|False:
  switch(get-env("SLM_COLOR")):
    "always": true
    "never": false
    else:
      ; TODO should check if output is to a TTY instead of assuming
      true

public defn pairs<?K, ?V> (s: Seqable<KeyValue<?K, ?V>>) -> Seq<[K, V]>:
  s $> to-seq $> seq{fn (kv): [key(kv), value(kv)], _}

public defn nth?<?T> (c: IndexedCollection<?T>, n: Int) -> Maybe<T>:
  if n < length(c) and n >= 0:
    One(get(c, n))
  else:
    None()

public defn last?<?T> (c: Seqable<?T>) -> Maybe<T>:
  let loop (s = to-seq(c), last = None()):
    if empty?(s):
      last
    else:
      loop(s, One(next(s)))

defn ssh-locator (locator: String) -> String :
  to-string("git@github.com:%_" % [locator])
defn https-locator (locator: String) -> String :
  to-string("https://github.com/%_" % [locator])
public defn full-url-from-locator (locator: String) -> String:
  switch(get-env("SLM_PROTOCOL")):
    "ssh":
      if has-git?() :
        ssh-locator(locator)
      else :
        throw(Exception("Error: SLM_PROTOCOL is set to SSH but Git was not found"))
    "https": https-locator(locator)
    else:
      if has-git?() :
        ;default to ssh for git to support ssh authentication
        ssh-locator(locator)
      else :
        ;https required for libgit
        https-locator(locator)

doc: \<DOC>
Join Strings to form a file system path.

This also works for joining strings to form
stanza full-qualified package paths.
<DOC>
public defn path-join (parts:String ...) -> String :
  string-join(parts, "/")

doc: \<DOC>
Given a string - split it on any of the passed characters.

The characters in the `splitters` are ordered. The first
one that succeeds will be returned

Example:

val ret = split-any("asdf#qwer", "^#")
#EXPECT(ret == ["asdf", "qwer"])

val ret = split-any("asdf:qwer", "^#")
#EXPECT(ret == ["asdf:qwer"])

<DOC>
public defn split-any (s:String, splitters:String) -> Tuple<String> :
  label<Tuple<String>> return:
    for splitter in splitters do:
      val comps = to-tuple $ split(s, to-string(splitter), 2)
      if length(comps) > 1 :
        return(comps)
    return([s])

doc: \<DOC>
Check that the pass string is non-empty

This is intended to be used with the `ensure` functionality of
`defstruct` member construction.
<DOC>
public defn ensure-not-empty! (field:String, v:String):
  if length(v) == 0:
    throw $ ValueError("Field[%_] - Expected Non-empty String - Received: %~" % [field, v])

public defn ensure-not-empty! (field:String, v?:Maybe<String>):
  match(v?):
    (v:One<String>): ensure-not-empty!(field, value(v))
    (_:None): false
