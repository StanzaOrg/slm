defpackage slm/file-utils:
  import core
  import core/parsed-path

  import maybe-utils

  import slm/utils
  import slm/string-utils

public defn open (f: (FileOutputStream) -> False, path: String, append?: True|False) -> False:
  val file = FileOutputStream(path, append?)
  try: f(file)
  finally: close(file)

lostanza val GET-CWD-BUFF-SIZE: long = 0x1000L
extern getcwd: (ptr<byte>, long) -> ptr<byte>

public lostanza defn get-cwd () -> ref<String>:
  val buff = call-c clib/malloc(GET-CWD-BUFF-SIZE)
  call-c getcwd(buff, GET-CWD-BUFF-SIZE)
  val ret = String(buff)
  call-c clib/free(buff)
  return ret

public defn dir-name? (path: String) -> Maybe<String>:
  split-last(path, '/') $> map{_, first}

public defn base-name? (path: String) -> Maybe<String>:
  path
    $> entries{parse-path(_)}
    $> last?
    $> map{_, {[_]}}
    $> map{_, ParsedPath}
    $> map{_, to-string}

public defn create-empty-file (path: String) -> False:
  spit(path, "")

public defn slurp-stream (s: InputStream) -> String:
  val buffer = StringBuffer()
  defn* loop () :
    match(get-char(s)) :
      (c:Char) :
        add(buffer, c)
           loop()
      (c:False) :
        to-string(buffer)
  loop()

public defn delete-files-in-dir (path: String) -> False:
  val dir-path = parse-path(path)
  for file in dir-files(path) do:
    val file-path = to-string $ relative-to-dir(dir-path, file)
    if file-type(file-path, false) is DirectoryType:
      delete-recursive(file-path)
    else:
      delete-file(file-path)

public defn delete-file-if-exists (path: String) -> False:
  try:
    delete-file(path)
  catch (e: FileDeletionError):
    false
