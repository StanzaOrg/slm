defpackage slm/pkg-dep:
  import core
  import collections

  import maybe-utils
  import term-colors
  import toml

  import slm/conan-utils
  import slm/dependency
  import slm/errors
  import slm/file-utils
  import slm/flags
  import slm/logging
  import slm/platforms
  import slm/process-utils
  import slm/string-utils
  import slm/utils

doc: \<DOC>
Define a Pkg Dependency representing a pre-compiled stanza pkg archive
stored in a conan/artifactory repository

This dependency is intended to define a pre-compiled archive
of stanza pkg binaries which can be linked into an slm project.
This archive may be stored on a remote conan/artifactory server.
<DOC>
public defstruct PkgDependency <: Dependency & Hashable & Equalable:
  name:String with: (
    as-method => true
    ensure => ensure-not-empty!
    )
  version: String
  type: String
  options: TomlTable
with:
  hashable => true

defmethod recursive (d:PkgDependency) -> True|False :
  ; a pkg can have recursive deps
  true

defmethod path (d:PkgDependency) -> String:
  path-join(SLM_DEPS_DIR, name(d))

defmethod equal? (a:PkgDependency, b:PkgDependency) -> True|False :
  name(a) == name(b) and version(a) == version(b) and type(a) == type(b) and to-string(options(a)) == to-string(options(b))

public defn PkgDependency (
  name: String
  version: String  ; may not always be a SemanticVersion
  type: String
  --
  options:TomlTable = TomlTable()
  ) -> PkgDependency :
  PkgDependency(name, version, type, options)

defmethod print (o:OutputStream, d:PkgDependency) :
  val comps = Vector<String|Printable>()
  add(comps, "pkg = %~" % [name(d)])
  add(comps, "version = %~" % [version-string(d)])
  add(comps, "type = %~" % [type(d)])
  if length(entries(options(d))) > 0 :
    val opt-str = options-to-string(d)
    add(comps, "options = %_" % [opt-str])

  val entries = string-join(comps, ", ")
  print(o, "%_ = { %_ }" % [name(d), entries])

public defn version-string (d: PkgDependency) -> String:
  to-string(version(d))

public defn colored-version? (d: PkgDependency) -> ColoredString:
  ColoredString(version-string(d))
    $> bold $> foreground{_, TerminalBrightGreen}
    $> clear-color?

public defn colored-name? (d: PkgDependency) -> ColoredString:
  ColoredString(name(d))
    $> bold $> foreground{_, TerminalBrightWhite}
    $> clear-color?

defn options-to-string (d:PkgDependency) -> String :
  val elems = for kvp in options(d) seq:
    to-string("%~ = %~" % [key(kvp), value(kvp)])
  to-string("{ %, }" % [elems])

defn sub-vars? (v:Maybe<String>, enable:True|False) -> Maybe<String> :
  if enable : env-var-substitute(v)
  else: v

doc: \<DOC>
Parse a Pkg object from the TOML configuration

@param table TomlTable that contains the following structure:
{
  "name" : "",
  "version" : "",
  "type" : "",
  "options" : {
    "" : ""
  }
}
<DOC>
public defn parse-pkg-dependency (name:String, table:TomlTable -- env-sub-enable:True|False = false) -> PkgDependency :
  val version? = get-str?(table, "version")
  val version = value-or-throw(version?, InvalidPkgDependency(name, "No 'version' key found"))
  val type? = sub-vars?{_, env-sub-enable} $ get-str?(table, "type")
  val type = value-or-throw(type?, InvalidPkgDependency(name, "No 'type' key found"))
  val opt-table? = get-table?(table, "options")
  val options = match(opt-table?):
    (_:None): TomlTable()
    (x:One<TomlTable>):
      ;parse-options(value(x), env-sub-enable = env-sub-enable)
      value(x)
  PkgDependency(name, version, type, options)

public defn fetch-or-sync-pkgver (d: PkgDependency, parent-name:String|False = false, dep-path:String|False = false) -> Maybe<PkgDependency>:
  fetch-dependency-pkgver(d)
  to-maybe(d)

public defn fetch-dependency-pkgver (d: PkgDependency) -> False:
  info("fetching %_ at %_" % [colored-name?(d), colored-version?(d)])
  info("fetching with options: \"%_\"" % [options(d)])

  ; PkgDependency version may have revision and package_id components, so use string constructor for ConanVersion
  val cv = ConanVersion(to-string("%_/%_" % [name(d), version(d)]))
  val filename = conan-download-package(cv, options = options(d), target_directory = get-cwd())

  val dest = to-string("$_/.slm/deps/%_" % [get-cwd(), name(d)])
  create-dir-recursive(dest)

  debug("extracting \"%_\" to \"%_\"" % [filename, dest])
  val untar-cmd = ["tar", "zxf", filename]
  val p = ProcessBuilder(untar-cmd)
    $> in-dir{_, dest}
    $> with-output
    $> build
  wait-process-throw-on-nonzero(p, "Error extracting conan archive")
  false
